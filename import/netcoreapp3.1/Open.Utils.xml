<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Open.Utils</name>
    </assembly>
    <members>
        <member name="T:Open.Utils.Appsettings">
            <summary>
            appsettings.json操作类
            </summary>
        </member>
        <member name="M:Open.Utils.Appsettings.app(System.String[])">
            <summary>
            封装要操作的字符
            </summary>
            <param name="sections"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Common">
            <summary>
            常用公共类
            </summary>
        </member>
        <member name="M:Open.Utils.Common.TimerStart(System.Diagnostics.Stopwatch)">
            <summary>
            计时器开始
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Common.TimerEnd(System.Diagnostics.Stopwatch)">
            <summary>
            计时器结束
            </summary>
            <param name="watch"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Common.RemoveDup(System.String[])">
            <summary>
            删除数组中的重复项
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Common.GetRandomString(System.Int32)">
            <summary>
            生成随机字符串 
            </summary>
        </member>
        <member name="M:Open.Utils.Common.GuId">
            <summary>
            表示全局唯一标识符 (GUID)。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Common.CreateNo">
            <summary>
            自动生成编号  201008251145409865
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Common.RndNum(System.Int32)">
            <summary>
            生成0-9随机数
            </summary>
            <param name="codeNum">生成长度</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Common.DelLastComma(System.String)">
            <summary>
            删除最后结尾的一个逗号
            </summary>
        </member>
        <member name="M:Open.Utils.Common.DelLastChar(System.String,System.String)">
            <summary>
            删除最后结尾的指定字符后的字符
            </summary>
        </member>
        <member name="M:Open.Utils.Common.DelLastLength(System.String,System.Int32)">
            <summary>
            删除最后结尾的长度
            </summary>
            <param name="str"></param>
            <param name="Length"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Common.IsMobile(System.String)">
            <summary>
            验证是否合法的手机号码
            </summary>
        </member>
        <member name="M:Open.Utils.Common.IsPhoneNo(System.String)">
            <summary>
            验证是否合法的电话号码或手机号码 
            </summary>
        </member>
        <member name="M:Open.Utils.Common.CheckIDCard(System.String)">
            <summary>
            验证是否合法的身份证号码
            </summary>
        </member>
        <member name="M:Open.Utils.Common.CheckIDCard18(System.String)">
            <summary>
            18位身份证验证
            </summary>
        </member>
        <member name="M:Open.Utils.Common.CheckIDCard15(System.String)">
            <summary>
            15位身份证验证
            </summary>
        </member>
        <member name="M:Open.Utils.Common.GetType``1">
            <summary>
            获取类型
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Open.Utils.Common.GetType(System.Type)">
            <summary>
            获取类型
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="P:Open.Utils.Common.Line">
            <summary>
            换行符
            </summary>
        </member>
        <member name="M:Open.Utils.Common.GetPhysicalPath(System.String)">
            <summary>
            获取物理路径
            </summary>
            <param name="relativePath">相对路径</param>
        </member>
        <member name="M:Open.Utils.Common.GetWebRootPath(System.String)">
            <summary>
            获取wwwroot路径
            </summary>
            <param name="relativePath">相对路径</param>
        </member>
        <member name="M:Open.Utils.Common.ToSBC(System.String)">
            <summary>
            半角转全角
            --->中文不分全角半角，全角与半角是针对字符的。全角空格为12288，半角空格为32；其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </summary>
        </member>
        <member name="M:Open.Utils.Common.ToDBC(System.String)">
            <summary>
            全角转半角
            --->中文不分全角半角，全角与半角是针对字符的。全角空格为12288，半角空格为32；其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </summary>
        </member>
        <member name="M:Open.Utils.Common.StampToDateTime(System.String)">
            <summary>
            Unix时间戳格式转为DateTime时间格式
            </summary>
            <param name="timeStamp"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Common.ConvertDateTimeToInt(System.DateTime)">
            <summary>  
             DateTime时间格式转换为Unix时间戳格式 13位
            </summary>  
            <param name="time">时间</param>  
            <returns>long</returns>  
        </member>
        <member name="M:Open.Utils.SerializeCommon.ListSerializeJson``1(System.Collections.Generic.List{``0})">
            <summary>
            将List数据格式转换为Json
            </summary>
            <param name="list">List数据</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SerializeCommon.ObjectSerializeJson``1(``0)">
            <summary>
            将对象转为json字符串，并转换时间格式，时间戳转换
            </summary>
            <param name="t">json数据</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SerializeCommon.ObjectToJson``1(``0)">
            <summary>
            将对象转为json字符串，并忽略为null的字段
            </summary>
            <param name="t">json数据</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SerializeCommon.JsonToDictionary(System.String)">
            <summary>
            将json数据反序列化为Dictionary
            </summary>
            <param name="jsonData">json数据</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SerializeCommon.DictionaryToJson(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将Dictionary序列化为json数据
            </summary>
            <param name="jsonData">json数据</param>
            <returns></returns>
        </member>
        <member name="P:Open.Utils.DbWhere.sql">
            <summary>
            sql语句
            </summary>
        </member>
        <member name="P:Open.Utils.DbWhere.dbParameters">
            <summary>
            查询参数
            </summary>
        </member>
        <member name="M:Open.Utils.FieldTypeHepler.ToDbType(System.String)">
            <summary>
            获取数据类型
            </summary>
            <param name="datatype"></param>
            <returns></returns>
        </member>
        <member name="P:Open.Utils.FieldValueParam.name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:Open.Utils.FieldValueParam.value">
            <summary>
            数据值
            </summary>
        </member>
        <member name="P:Open.Utils.FieldValueParam.type">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Open.Utils.FieldValueParam.operation">
            <summary>
            操作符
            </summary>
        </member>
        <member name="M:Open.Utils.SqlHelper.GetPropertyInfo``1(``0)">
            <summary>
            获取实体类键值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SqlHelper.FieldValueParamToParameter(System.Collections.Generic.List{Open.Utils.FieldValueParam})">
            <summary>
            将对象参数
            </summary>
            <param name="fieldValueParams">对象</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SqlHelper.MySqlPageSql(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            mysql分页语句
            </summary>
            <param name="strSql">sql语句</param>
            <param name="orderField">排序字段</param>
            <param name="isAsc">排序类型</param>
            <param name="pageSize">每页数据条数</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.SqlSugarClientInit">
            <summary>
            SqlSugarClient DB 用于原生写法，分库分表
            </summary>
        </member>
        <member name="M:Open.Utils.SqlSugarClientInit.Init(System.String,System.String)">
            <summary>
            SqlSugarClient DB 用于原生写法，分库分表
            </summary>
            <param name="ConnectionString">Appsettings.json中ConnectionString连接字符串</param>
            <param name="dbType">数据库类型，MySql、Oracle、SqlServer、Sqlite、PostgreSQL</param>
            <returns>SqlSugarClient</returns>
        </member>
        <member name="T:Open.Utils.Dependency.Bootstrapper">
            <summary>
            依赖引导器
            </summary>
        </member>
        <member name="F:Open.Utils.Dependency.Bootstrapper._services">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="F:Open.Utils.Dependency.Bootstrapper._configs">
            <summary>
            依赖配置
            </summary>
        </member>
        <member name="F:Open.Utils.Dependency.Bootstrapper._finder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="F:Open.Utils.Dependency.Bootstrapper._assemblies">
            <summary>
            程序集列表
            </summary>
        </member>
        <member name="F:Open.Utils.Dependency.Bootstrapper._builder">
            <summary>
            容器生成器
            </summary>
        </member>
        <member name="F:Open.Utils.Dependency.Bootstrapper._aopConfigAction">
            <summary>
            Aop配置操作
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Open.Utils.Dependency.IConfig[],System.Action{AspectCore.Configuration.IAspectConfiguration},Open.Utils.Reflections.IFind)">
            <summary>
            初始化依赖引导器
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <param name="aopConfigAction">Aop配置操作</param>
            <param name="finder">类型查找器</param>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,Open.Utils.Dependency.IConfig[],System.Action{AspectCore.Configuration.IAspectConfiguration},Open.Utils.Reflections.IFind)">
            <summary>
            启动引导
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
            <param name="aopConfigAction">Aop配置操作</param>
            <param name="finder">类型查找器</param>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.Run(Microsoft.Extensions.DependencyInjection.IServiceCollection,Open.Utils.Dependency.IConfig[])">
            <summary>
            启动引导
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.Bootstrap">
            <summary>
            引导
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.RegisterServices(Autofac.ContainerBuilder)">
            <summary>
            注册服务集合
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.RegisterInfrastracture">
            <summary>
            注册基础设施
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.EnableAop">
            <summary>
            启用Aop
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.RegisterFinder">
            <summary>
            注册类型查找器
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.RegisterEventHandlers">
            <summary>
            注册事件处理器
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.RegisterEventHandlers(System.Type)">
            <summary>
            注册事件处理器
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.GetTypes(System.Type)">
            <summary>
            获取类型集合
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.RegisterDependency">
            <summary>
            查找并注册依赖
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.RegisterSingletonDependency">
            <summary>
            注册单例依赖
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.GetTypes``1">
            <summary>
            获取类型集合
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.RegisterScopeDependency">
            <summary>
            注册作用域依赖
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.RegisterTransientDependency">
            <summary>
            注册瞬态依赖
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Bootstrapper.ResolveDependencyRegistrar">
            <summary>
            解析依赖注册器
            </summary>
        </member>
        <member name="T:Open.Utils.Dependency.Container">
            <summary>
            Autofac对象容器
            </summary>
        </member>
        <member name="F:Open.Utils.Dependency.Container._container">
            <summary>
            容器
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Container.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.Container.CreateList(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.Container.Create``1(System.String)">
            <summary>
            创建对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.Container.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.Container.GetServiceFromHttpContext(System.Type,System.String)">
            <summary>
            从HttpContext获取服务
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Container.GetService(System.Type,System.String)">
            <summary>
            获取服务
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Container.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Container.Register(Open.Utils.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Dependency.Container.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,Open.Utils.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Dependency.Container.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder},Open.Utils.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="actionBefore">注册前操作</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Dependency.Container.CreateBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Autofac.ContainerBuilder},Open.Utils.Dependency.IConfig[])">
            <summary>
            创建容器生成器
            </summary>
            <param name="services">服务集合</param>
            <param name="actionBefore">注册前执行的操作</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Dependency.Container.Dispose">
            <summary>
            释放容器
            </summary>
        </member>
        <member name="T:Open.Utils.Dependency.Extensions">
            <summary>
            AspectCore扩展
            </summary>
            <summary>
            Autofac扩展
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Extensions.EnableAop(Autofac.ContainerBuilder,System.Action{AspectCore.Configuration.IAspectConfiguration})">
            <summary>
            启用Aop
            </summary>
            <param name="builder">容器生成器</param>
            <param name="configAction">Aop配置</param>
        </member>
        <member name="M:Open.Utils.Dependency.Extensions.EnableAspectScoped(Autofac.ContainerBuilder)">
            <summary>
            启用Aop作用域
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Extensions.AddTransient``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 InstancePerDependency(每次创建一个新实例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.Extensions.AddScoped``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 InstancePerLifetimeScope(每个请求一个实例)
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.Extensions.AddScoped``1(Autofac.ContainerBuilder)">
            <summary>
            注册服务，生命周期为 InstancePerLifetimeScope(每个请求一个实例)
            </summary>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
        </member>
        <member name="M:Open.Utils.Dependency.Extensions.AddSingleton``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            注册服务，生命周期为 SingleInstance（单例）
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <typeparam name="TImplementation">实现类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.Extensions.AddSingleton``1(Autofac.ContainerBuilder,``0)">
            <summary>
            注册服务，生命周期为 SingleInstance（单例）
            </summary>
            <typeparam name="TService">接口类型</typeparam>
            <param name="builder">容器生成器</param>
            <param name="instance">服务实例</param>
        </member>
        <member name="T:Open.Utils.Dependency.IConfig">
            <summary>
            依赖配置
            </summary>
        </member>
        <member name="T:Open.Utils.Dependency.IContainer">
            <summary>
            容器
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.IContainer.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.IContainer.CreateList(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.IContainer.Create``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.IContainer.Create(System.Type,System.String)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Dependency.IContainer.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.IContainer.Register(Open.Utils.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Dependency.IContainer.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,Open.Utils.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="T:Open.Utils.Dependency.IDependencyRegistrar">
            <summary>
            依赖注册器
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.IDependencyRegistrar.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="T:Open.Utils.Dependency.IScope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.IScope.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="M:Open.Utils.Dependency.IScope.Create(System.Type)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
        </member>
        <member name="T:Open.Utils.Dependency.IScopeDependency">
            <summary>
            实现该接口将自动注册到Ioc容器，生命周期为每次请求创建一个实例
            </summary>
        </member>
        <member name="T:Open.Utils.Dependency.ISingletonDependency">
            <summary>
            实现该接口将自动注册到Ioc容器，生命周期为单例
            </summary>
        </member>
        <member name="T:Open.Utils.Dependency.ITransientDependency">
            <summary>
            实现该接口将自动注册到Ioc容器，生命周期为每次创建一个新实例
            </summary>
        </member>
        <member name="T:Open.Utils.Dependency.Scope">
            <summary>
            作用域
            </summary>
        </member>
        <member name="F:Open.Utils.Dependency.Scope._scope">
            <summary>
            autofac作用域
            </summary>
        </member>
        <member name="M:Open.Utils.Dependency.Scope.#ctor(Autofac.ILifetimeScope)">
            <summary>
            初始化作用域
            </summary>
            <param name="scope">autofac作用域</param>
        </member>
        <member name="M:Open.Utils.Dependency.Scope.Create``1">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="M:Open.Utils.Dependency.Scope.Create(System.Type)">
            <summary>
            创建对象
            </summary>
            <param name="type">对象类型</param>
        </member>
        <member name="M:Open.Utils.Dependency.Scope.Dispose">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="F:Open.Utils.BaseEnum.Status">
            <summary>
            请求(或处理)成功
            </summary>
        </member>
        <member name="F:Open.Utils.BaseEnum.Error">
            <summary>
            内部请求出错
            </summary>
        </member>
        <member name="F:Open.Utils.BaseEnum.Unauthorized">
            <summary>
            未授权标识
            </summary>
        </member>
        <member name="F:Open.Utils.BaseEnum.ParameterError">
            <summary>
            请求参数不完整或不正确
            </summary>
        </member>
        <member name="F:Open.Utils.BaseEnum.TokenInvalid">
            <summary>
            请求TOKEN失效
            </summary>
        </member>
        <member name="F:Open.Utils.BaseEnum.HttpMehtodError">
            <summary>
            HTTP请求类型不合法
            </summary>
        </member>
        <member name="F:Open.Utils.BaseEnum.HttpRequestError">
            <summary>
            HTTP请求不合法,请求参数可能被篡改
            </summary>
        </member>
        <member name="F:Open.Utils.BaseEnum.URLExpireError">
            <summary>
            该URL已经失效
            </summary>
        </member>
        <member name="T:Open.Utils.CodeRuleEnum">
            <summary>
            自动编号 规则分类枚举
            </summary>
        </member>
        <member name="F:Open.Utils.CodeRuleEnum.TransOrderCode">
            <summary>
            交易单号
            </summary>
        </member>
        <member name="T:Open.Utils.AmountStateEnum">
            <summary>
            缴费状态 分类枚举
            </summary>
        </member>
        <member name="F:Open.Utils.AmountStateEnum.Paid">
            <summary>
            已缴费
            </summary>
        </member>
        <member name="F:Open.Utils.AmountStateEnum.NoPaid">
            <summary>
            已缴费
            </summary>
        </member>
        <member name="T:Open.Utils.AmountTypeEnum">
            <summary>
            收款方式 分类枚举
            </summary>
        </member>
        <member name="F:Open.Utils.AmountTypeEnum.Cash">
            <summary>
            已缴费
            </summary>
        </member>
        <member name="F:Open.Utils.AmountTypeEnum.Transfer">
            <summary>
            已缴费
            </summary>
        </member>
        <member name="F:Open.Utils.AmountTypeEnum.AliPay">
            <summary>
            支付宝
            </summary>
        </member>
        <member name="F:Open.Utils.AmountTypeEnum.WeChatPay">
            <summary>
            微信
            </summary>
        </member>
        <member name="F:Open.Utils.AmountTypeEnum.SubcribePay">
            <summary>
            认缴
            </summary>
        </member>
        <member name="T:Open.Utils.EnumExtension">
            <summary>
            枚举扩展属性
            </summary>
        </member>
        <member name="M:Open.Utils.EnumExtension.GetEnumText(System.Enum)">
            <summary>
            获得枚举提示文本
            </summary>
            <param name="en"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Operator">
            <summary>
            查询操作符
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.Starts">
            <summary>
            头匹配
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.Ends">
            <summary>
            尾匹配
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.Contains">
            <summary>
            模糊匹配
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:Open.Utils.Operator.NotIn">
            <summary>
            Not In
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.ForeColor">
            <summary>
            前景色
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.Background">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.TitlePoint">
            <summary>
            标题字号
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.HeadPoint">
            <summary>
            列头字号
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.TitleHeight">
            <summary>
            标题高度
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.HeadHeight">
            <summary>
            列标题高度
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.TitleFont">
            <summary>
            标题字体
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.HeadFont">
            <summary>
            列头字体
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.IsAllSizeColumn">
            <summary>
            是否按内容长度来适应表格宽度
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ExcelConfig.ColumnEntity">
            <summary>
            列设置
            </summary>
        </member>
        <member name="T:Open.Utils.Excel.ExcelEpPlus">
            <summary>
            Excel导入导出助手
            NuGet：EPPlus.Core
            </summary>
        </member>
        <member name="F:Open.Utils.Excel.ExcelEpPlus.Excel">
            <summary>
            Excel文件 Content-Type
            </summary>
        </member>
        <member name="M:Open.Utils.Excel.ExcelEpPlus.Export``1(System.String,System.Collections.Generic.List{``0},System.String,System.Tuple{System.String,System.String}@,System.Boolean)">
            <summary>
            Excel导出
            </summary>
            <param name="keyValuePairs">字典表【名称，数据】</param>
            <param name="sWebRootFolder">网站根文件夹</param>
            <param name="tuple">item1:The virtual path of the file to be returned.|item2:The Content-Type of the file</param>
            <param name="isExportAddQRCode">如果实体中有二维码，是否导出二维码</param>
        </member>
        <member name="M:Open.Utils.Excel.ExcelEpPlus.Export(System.Collections.Generic.Dictionary{System.String,System.Data.DataTable},System.String,System.Tuple{System.String,System.String}@)">
            <summary>
            Excel导出
            </summary>
            <param name="keyValuePairs">字典表【名称，数据】</param>
            <param name="sWebRootFolder">网站根文件夹</param>
            <param name="tuple">item1:The virtual path of the file to be returned.|item2:The Content-Type of the file</param>
        </member>
        <member name="M:Open.Utils.Excel.ExcelEpPlus.Export(System.Collections.Generic.Dictionary{System.String,System.Data.DataTable},System.String,System.String,System.String,System.String,System.Tuple{System.String,System.String}@,System.Double)">
            <summary>
            Excel导出
            </summary>
            <param name="keyValuePairs">字典表【名称，数据】</param>
            <param name="sWebRootFolder">网站根文件夹</param>
            <param name="sFileName">文件名(不要包含后缀.xlsx)</param>
            <param name="title">第一行标题</param>
            <param name="titleIndex">第一行标题的合并到第几列</param>
            <param name="tuple">item1:The virtual path of the file to be returned.|item2:The Content-Type of the file</param>
        </member>
        <member name="M:Open.Utils.Excel.ExcelEpPlus.ImportByEPPlus``1(System.String,System.String[])">
            <summary>
            Excel导入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="request">导入文件</param>
            <param name="colNames">excel列名-对象属性</param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Excel.ExcelHelper">
            <summary>
            Excel导入导出
            </summary>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ExcelDownload``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            Excel导出下载，列名为对应实体备注
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="list">数据源</param>
            <param name="fileName">下载文件名称，标题</param>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ExcelDownload(System.Data.DataTable,System.Collections.Generic.List{Open.Utils.Excel.jqGridModel},System.String)">
            <summary>
            Excel导出下载
            </summary>
            <param name="dtSource">DataTable数据源</param>
            <param name="excelConfig">导出设置包含文件名、标题、列设置</param>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ExcelDownload(System.Data.DataTable,Open.Utils.Excel.ExcelConfig)">
            <summary>
            Excel导出下载
            </summary>
            <param name="dtSource">DataTable数据源</param>
            <param name="excelConfig">导出设置包含文件名、标题、列设置</param>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将泛型集合类转换成DataTable
            </summary>
            <typeparam name="T">集合项类型</typeparam>
            <param name="list">集合</param>
            <returns>数据集(表)</returns>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ListToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将泛类型集合List类转换成DataTable
            </summary>
            <param name="list">泛类型集合</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ExcelExportToFile(System.Data.DataTable,Open.Utils.Excel.ExcelConfig,System.String)">
            <summary>
            DataTable导出到Excel文件 Export()
            </summary>
            <param name="dtSource">DataTable数据源</param>
            <param name="excelConfig">导出设置包含文件名、标题、列设置</param>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ExportMemoryStream(System.Data.DataTable,Open.Utils.Excel.ExcelConfig)">
            <summary>
            DataTable导出到Excel的MemoryStream Export()
            </summary>
            <param name="dtSource">DataTable数据源</param>
            <param name="excelConfig">导出设置包含文件名、标题、列设置</param>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ExcelImport(System.String)">
            <summary>
            读取excel ,默认第一行为标头
            </summary>
            <param name="strFileName">excel文档路径</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ExcelImport(System.String,System.Int32)">
            <summary>
            读取excel ,默认第一行为标头
            </summary>
            <param name="strFileName">excel文档路径</param>
            <param name="headerRowNo">标题行号，以0开始</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ExcelImport(System.IO.Stream,System.String)">
            <summary>
            读取excel ,默认第一行为标头
            </summary>
            <param name="fileStream">文件数据流</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ExcelImport(System.IO.Stream,System.String,System.Int32)">
            <summary>
            读取excel ,默认第一行为标头
            </summary>
            <param name="fileStream">文件数据流</param>
            <param name="headerRowNo">标题行号从0开始</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.ReadSheetToDataTable(System.Int32,NPOI.SS.UserModel.ISheet)">
            <summary>
            从sheet中读取数据到DataTable
            </summary>
            <param name="headerRowNo">标题行号（数据行号=标题行号+1）</param>
            <param name="sheet"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.getAlignment(System.String)">
            <summary>
            设置对齐方式
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.JointXls(System.String)">
            <summary>
            如果文件名中没有后缀名，增加文件后缀名
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Excel.ExcelHelper.MIMEType">
            <summary>
            MIME文件类型
            </summary>
        </member>
        <member name="M:Open.Utils.Excel.ExcelHelper.TojqGridModel``1">
            <summary>
            获取实体对象备注，赋值到列名
            </summary>
            <typeparam name="T">实体</typeparam>
            <returns>数据集(表)</returns>
        </member>
        <member name="M:Open.Utils.Excel.ExportReport.ExportExcel(System.Data.DataTable,System.String,System.String,System.String[],System.String@)">
            <summary>
            EPPlus导出
            </summary>
            <summary>
            导出Excel
            </summary>
            <param name="dt">数据源</param>
            <param name="sWebRootFolder">webRoot文件夹</param>
            <param name="sFileName">文件名</param>
            <param name="sColumnName">自定义列名（不传默认dt列名）</param>
            <returns></returns>
        </member>
        <member name="P:Open.Utils.Excel.ColumnModel.Column">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ColumnModel.ExcelColumn">
            <summary>
            Excel列名
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ColumnModel.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ColumnModel.ForeColor">
            <summary>
            前景色
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ColumnModel.Background">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ColumnModel.Font">
            <summary>
            字体
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ColumnModel.Point">
            <summary>
            字号
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.ColumnModel.Alignment">
             <summary>
            对齐方式
            left 左
            center 中间
            right 右
            fill 填充
            justify 两端对齐
            centerselection 跨行居中
            distributed
             </summary>
        </member>
        <member name="P:Open.Utils.Excel.TemplateDataModel.row">
            <summary>
            行号
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.TemplateDataModel.cell">
            <summary>
            列号
            </summary>
        </member>
        <member name="P:Open.Utils.Excel.TemplateDataModel.value">
            <summary>
            数据值
            </summary>
        </member>
        <member name="T:Open.Utils.Exceptionless.ExceptionlessLogger">
            <summary>
             Exceptionless日志实现
            </summary>
        </member>
        <member name="M:Open.Utils.Exceptionless.ExceptionlessLogger.Trace(System.String,System.String,System.String[])">
            <summary>
            记录trace日志
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">添加标记</param>
        </member>
        <member name="M:Open.Utils.Exceptionless.ExceptionlessLogger.Debug(System.String,System.String,System.String[])">
            <summary>
            记录debug信息
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">标记</param>
        </member>
        <member name="M:Open.Utils.Exceptionless.ExceptionlessLogger.Info(System.String,System.String,System.String[])">
            <summary>
            记录信息
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">标记</param>
        </member>
        <member name="M:Open.Utils.Exceptionless.ExceptionlessLogger.Warn(System.String,System.String,System.String[])">
            <summary>
            记录警告日志
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">标记</param>
        </member>
        <member name="M:Open.Utils.Exceptionless.ExceptionlessLogger.Error(System.String,System.String,System.String[])">
            <summary>
            记录错误日志
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">标记</param>
        </member>
        <member name="T:Open.Utils.Exceptionless.ILoggerHelper">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:Open.Utils.Exceptionless.ILoggerHelper.Trace(System.String,System.String,System.String[])">
            <summary>
            记录trace日志
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">标记</param>
        </member>
        <member name="M:Open.Utils.Exceptionless.ILoggerHelper.Debug(System.String,System.String,System.String[])">
            <summary>
            记录debug信息
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">标记</param>
        </member>
        <member name="M:Open.Utils.Exceptionless.ILoggerHelper.Info(System.String,System.String,System.String[])">
            <summary>
            记录信息
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">标记</param>
        </member>
        <member name="M:Open.Utils.Exceptionless.ILoggerHelper.Warn(System.String,System.String,System.String[])">
            <summary>
            记录警告日志
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">标记</param>
        </member>
        <member name="M:Open.Utils.Exceptionless.ILoggerHelper.Error(System.String,System.String,System.String[])">
            <summary>
            记录错误日志
            </summary>
            <param name="source">信息来源</param>
            <param name="message">日志内容</param>
            <param name="args">标记</param>
        </member>
        <member name="M:Open.Utils.ExceptionEx.#ctor(System.String,System.Exception)">
             <summary>
            使用异常消息与一个内部异常实例化一个 类的新实例
             </summary>
             <param name="message">异常消息</param>
             <param name="inner">用于封装在DalException内部的异常实例</param>
        </member>
        <member name="M:Open.Utils.ExceptionEx.ThrowBusinessException(System.Exception,System.String)">
             <summary>
            向调用层抛出业务逻辑访问层异常
             </summary>
             <param name="msg"> 自定义异常消息 </param>
             <param name="e"> 实际引发异常的异常实例 </param>
        </member>
        <member name="M:Open.Utils.ExceptionEx.ThrowServiceException(System.Exception,System.String)">
            <summary>
            向调用层抛出数据服务访问层异常
            </summary>
            <param name="e"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ExceptionEx.ThrowDataAccessException(System.Exception,System.String)">
             <summary>
            向调用层抛出数据访问层异常
             </summary>
             <param name="msg"> 自定义异常消息 </param>
             <param name="e"> 实际引发异常的异常实例 </param>
        </member>
        <member name="M:Open.Utils.ExceptionEx.ThrowComponentException(System.Exception,System.String)">
            <summary>
                向调用层抛出组件异常
            </summary>
            <param name="msg"> 自定义异常消息 </param>
            <param name="e"> 实际引发异常的异常实例 </param>
        </member>
        <member name="T:Open.Utils.ParameterRebinder">
            <summary>
            参数重绑定操作
            </summary>
        </member>
        <member name="F:Open.Utils.ParameterRebinder._map">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:Open.Utils.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            初始化参数重绑定操作
            </summary>
            <param name="map">参数字典</param>
        </member>
        <member name="M:Open.Utils.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">参数字典</param>
            <param name="exp">表达式</param>
        </member>
        <member name="M:Open.Utils.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression">参数</param>
        </member>
        <member name="M:Open.Utils.Ext.ToInt(System.Object)">
            <summary>
            转换为整型
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.ToIntOrNull(System.Object)">
            <summary>
            转换为可空整型
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDouble(System.Object)">
            <summary>
            转换为双精度浮点数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDouble(System.Object,System.Int32)">
            <summary>
            转换为双精度浮点数,并按指定的小数位4舍5入
            </summary>
            <param name="data">数据</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDoubleOrNull(System.Object)">
            <summary>
            转换为可空双精度浮点数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDecimal(System.Object)">
            <summary>
            转换为高精度浮点数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDecimal(System.Object,System.Int32)">
            <summary>
            转换为高精度浮点数,并按指定的小数位4舍5入
            </summary>
            <param name="data">数据</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDecimalOrNull(System.Object)">
            <summary>
            转换为可空高精度浮点数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDecimalOrNull(System.Object,System.Int32)">
            <summary>
            转换为可空高精度浮点数,并按指定的小数位4舍5入
            </summary>
            <param name="data">数据</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDate(System.Object)">
            <summary>
            转换为日期
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDateOrNull(System.Object)">
            <summary>
            转换为可空日期
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.ToBool(System.Object)">
            <summary>
            转换为布尔值
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.GetBool(System.Object)">
            <summary>
            获取布尔值
            </summary>
        </member>
        <member name="M:Open.Utils.Ext.ToBoolOrNull(System.Object)">
            <summary>
            转换为可空布尔值
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Ext.SafeValue``1(System.Nullable{``0})">
            <summary>
            安全返回值
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:Open.Utils.Ext.IsEmpty(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Ext.IsEmpty(System.Nullable{System.Guid})">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Ext.IsEmpty(System.Guid)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Ext.IsEmpty(System.Object)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDateShortString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDateString">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToChineseDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToChineseDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Ext.ToChineseDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Open.Utils.Ext.ToChineseDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Open.Utils.Ext.Description(System.Boolean)">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="M:Open.Utils.Ext.Description(System.Nullable{System.Boolean})">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="M:Open.Utils.Ext.Format(System.Int32,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Open.Utils.Ext.Format(System.Nullable{System.Int32},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Open.Utils.Ext.Format(System.Decimal,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Open.Utils.Ext.Format(System.Nullable{System.Decimal},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Open.Utils.Ext.Format(System.Double,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Open.Utils.Ext.Format(System.Nullable{System.Double},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Open.Utils.Ext.FormatRmb(System.Decimal)">
            <summary>
            获取格式化字符串,带￥
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Open.Utils.Ext.FormatRmb(System.Nullable{System.Decimal})">
            <summary>
            获取格式化字符串,带￥
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Open.Utils.Ext.FormatPercent(System.Decimal)">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Open.Utils.Ext.FormatPercent(System.Nullable{System.Decimal})">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Open.Utils.Ext.FormatPercent(System.Double)">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Open.Utils.Ext.FormatPercent(System.Nullable{System.Double})">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Open.Utils.ExtLinq.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:Open.Utils.ExtLinq.ParameterRebinder"/> class.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:Open.Utils.ExtLinq.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Replaces the parameters.
            </summary>
            <param name="map">The map.</param>
            <param name="exp">The exp.</param>
            <returns>Expression</returns>
        </member>
        <member name="M:Open.Utils.ExtList.GetPage``1(System.Collections.Generic.List{``0},System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取表里某页的数据
            </summary>
            <param name="data">表数据</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">分页大小</param>
            <param name="allPage">返回总页数</param>
            <returns>返回当页表数据</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Open.Utils.ExtList.IListToList``1(System.Collections.IList)" -->
        <member name="M:Open.Utils.ExtList.Paging``1(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">页大小</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ExtList.PagingAsync``1(SqlSugar.ISugarQueryable{``0},System.Int32,System.Int32)">
            <summary>
            分页
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">页大小</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Extend.ExtRandomNum.GenerateNonceStr">
            <summary>
            生成随机串，随机串包含字母或数字
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Extend.ExtRandomNum.GetRandomRaffle(System.Int32,System.Int32)">
            <summary>
            获取随机数
            </summary>
            <param name="min">随机数范围下界</param>
            <param name="number">随机数范围上界</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ExtTable.GetPage(System.Data.DataTable,System.Int32,System.Int32,System.Int32@)">
            <summary>
            获取表里某页的数据
            </summary>
            <param name="data">表数据</param>
            <param name="pageIndex">当前页</param>
            <param name="pageSize">分页大小</param>
            <param name="allPage">返回总页数</param>
            <returns>返回当页表数据</returns>
        </member>
        <member name="M:Open.Utils.ExtTable.GetDataFilter(System.Data.DataTable,System.String)">
            <summary>
            根据字段过滤表的内容
            </summary>
            <param name="data">表数据</param>
            <param name="condition">条件</param>
            <returns></returns>
            
        </member>
        <member name="T:Open.Utils.ExpressionExtensions">
            <summary>
            表达式树的扩展
            </summary>
        </member>
        <member name="M:Open.Utils.ExpressionExtensions.GenerateExpression``1(System.Collections.Generic.List{Open.Utils.FieldValueParam})">
            <summary>
            构建表达式树
            调用：GenerateExpression(new string[]{"username"},new object[]{"zzl"},new string[]{"="});
            </summary>
            <typeparam name="T">表类型</typeparam>
            <param name="keys">字段名</param>
            <param name="values">字段值</param>
            <param name="operation">操作符</param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Extensions.Extensions">
            <summary>
            系统扩展 - 类型转换
            </summary>
            <summary>
            系统扩展 - 日期
            </summary>
            <summary>
            系统扩展 - 基础设施
            </summary>
            <summary>
            系统扩展 - Lambda表达式
            </summary>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.SafeString(System.Object)">
            <summary>
            安全转换为字符串，去除两端空格，当值为null时返回""
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToBool(System.String)">
            <summary>
            转换为bool
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToBoolOrNull(System.String)">
            <summary>
            转换为可空bool
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToInt(System.String)">
            <summary>
            转换为int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToIntOrNull(System.String)">
            <summary>
            转换为可空int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToLong(System.String)">
            <summary>
            转换为long
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToLongOrNull(System.String)">
            <summary>
            转换为可空long
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDouble(System.String)">
            <summary>
            转换为double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDoubleOrNull(System.String)">
            <summary>
            转换为可空double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDecimal(System.String)">
            <summary>
            转换为decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDecimalOrNull(System.String)">
            <summary>
            转换为可空decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDate(System.String)">
            <summary>
            转换为日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDateOrNull(System.String)">
            <summary>
            转换为可空日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToGuid(System.String)">
            <summary>
            转换为Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToGuidOrNull(System.String)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">数据,范例: "83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToGuidList(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">字符串集合</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.CeilingDivide(System.Int32,System.Int32)">
            <summary>
            向上整除
            1.当num能被divideBy整除时,结果即为num/divideBy;
            2.当num不能被divideBy整除时,结果为num/divideBy + 1;
            </summary>
            <param name="num">被除数,大于或者等于0</param>
            <param name="divideBy">除数,大于0</param>
            <returns>向上整除结果</returns>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="removeSecond">是否移除秒</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="removeSecond">是否移除秒</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToChineseDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToChineseDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToChineseDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="removeSecond">是否移除秒</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToChineseDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="removeSecond">是否移除秒</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Description(System.TimeSpan)">
            <summary>
            获取描述
            </summary>
            <param name="span">时间间隔</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.AddUtil(Microsoft.Extensions.DependencyInjection.IServiceCollection,Open.Utils.Dependency.IConfig[])">
            <summary>
            注册Util基础设施服务
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.AddUtil(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{AspectCore.Configuration.IAspectConfiguration},Open.Utils.Dependency.IConfig[])">
            <summary>
            注册Util基础设施服务
            </summary>
            <param name="services">服务集合</param>
            <param name="aopConfigAction">Aop配置操作</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名,支持多级属性名，与句点分隔，范例：Customer.Name</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Property(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="member">属性</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            与操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            或操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Value``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取lambda表达式的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Equal(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Greater(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Greater(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Less(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Less(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.StartsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            头匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.EndsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            尾匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Contains(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            模糊匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Operation(System.Linq.Expressions.Expression,Open.Utils.Operator,System.Object)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Operation(System.Linq.Expressions.Expression,Open.Utils.Operator,System.Linq.Expressions.Expression)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <param name="merge">合并操作</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建Lambda表达式
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Open.Utils.Extensions.Extensions.ToPredicate``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建谓词表达式
            </summary>
            <typeparam name="T">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="P:Open.Utils.Extensions.User_DataSet_Policies.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Open.Utils.Extensions.User_DataSet_Policies.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Open.Utils.Extensions.User_DataSet_Policies.PolicyField">
            <summary>
            策略所需字段
            </summary>
        </member>
        <member name="P:Open.Utils.Extensions.User_DataSet_Policies.PolicyValue">
            <summary>
            策略所需要值
            </summary>
        </member>
        <member name="P:Open.Utils.Extensions.User_DataSet_Policies.PolicyOperation">
            <summary>
            策略操作符
            </summary>
        </member>
        <member name="M:Open.Utils.MyResourceFilterAttribute.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)">
            <summary>
            这个方法会在控制器实例化之前之前
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Open.Utils.MyResourceFilterAttribute.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)">
            <summary>
            这个方法是是Action的OnResultExecuted过滤器执行完之后在执行的（每次执行完Action之后得到就是一个ViewResult）
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Open.Utils.ILogHandler">
            <summary>
            操作日志处理接口
            </summary>
        </member>
        <member name="M:Open.Utils.ILogHandler.LogAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            写操作日志
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.LogHandler">
            <summary>
            通用接口过滤器，请求校验，操作日志处理
            </summary>
        </member>
        <member name="M:Open.Utils.LogHandler.LogAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            通用接口过滤器，请求校验，操作日志处理
            </summary>
            <param name="context">请求</param>
            <param name="next">响应</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SerializeLibrary.ContainProperty(System.Object,System.String)">
            <summary>
            利用反射来判断对象是否包含某个属性
            </summary>
            <param name="instance">object</param>
            <param name="propertyName">需要判断的属性</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:Open.Utils.SerializeLibrary.GetObjectPropertyValue``1(``0,System.String)">
            <summary>
            获取对象属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="propertyname"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SerializeLibrary.GetObjectProperty``1">
            <summary>
            获取属性列表
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Open.Utils.Helper.AutoMapperHelper.MapToList``2(System.Collections.Generic.List{``0})">
            <summary>
            集合列表类型映射
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.AutoMapperHelper.MapTo``2(``0,``1)">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.AutoMapperHelper.DataReaderMapTo``1(System.Data.IDataReader)">
            <summary>
            DataReader映射
            </summary>
        </member>
        <member name="T:Open.Utils.Helper.Convert">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToInt(System.Object)">
            <summary>
            转换为32位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToIntOrNull(System.Object)">
            <summary>
            转换为32位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToLong(System.Object)">
            <summary>
            转换为64位整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToLongOrNull(System.Object)">
            <summary>
            转换为64位可空整型
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToFloat(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToFloatOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为32位可空浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToDouble(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToDoubleOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为64位可空浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToDecimal(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToDecimalOrNull(System.Object,System.Nullable{System.Int32})">
            <summary>
            转换为128位可空浮点型,并按指定小数位舍入
            </summary>
            <param name="input">输入值</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToBool(System.Object)">
            <summary>
            转换为布尔值
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToBoolOrNull(System.Object)">
            <summary>
            转换为可空布尔值
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.GetBool(System.Object)">
            <summary>
            获取布尔值
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToDate(System.Object)">
            <summary>
            转换为日期
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToDateOrNull(System.Object)">
            <summary>
            转换为可空日期
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToGuid(System.Object)">
            <summary>
            转换为Guid
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToGuidOrNull(System.Object)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="input">以逗号分隔的Guid集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToList``1(System.String)">
            <summary>
            泛型集合转换
            </summary>
            <typeparam name="T">目标元素类型</typeparam>
            <param name="input">以逗号分隔的元素集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.To``1(System.Object)">
            <summary>
            通用泛型转换
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="input">输入值</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.byteToString(System.Byte[])">
            <summary>
            byte[]转字符串类型
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.Convert.stringToByte(System.String)">
            <summary>
            字符串类型转byte[]
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToBytes(System.String)">
            <summary>
            转换为字节数组
            </summary>
            <param name="input">输入值</param>        
        </member>
        <member name="M:Open.Utils.Helper.Convert.FromBase64String(System.String)">
            <summary>
             base64编码的字符串转换为字节数组
            </summary>
            <param name="input">输入值</param>        
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            转换为字节数组
            </summary>
            <param name="input">输入值</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Open.Utils.Helper.Convert.ToChinese(System.Decimal)">
            <summary>
            数字转换中文繁体金钱
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.CookieHelper.GetCookies(System.String)">
            <summary>
            获取cookies
            </summary>
            <param name="key">键</param>
            <returns>返回对应的值</returns>
        </member>
        <member name="M:Open.Utils.Helper.CookieHelper.SetCookies(System.String,System.String,System.Int32)">
            <summary>
            设置本地cookie
            </summary>
            <param name="key">键</param>
            <param name="value">值</param> 
            <param name="minutes">过期时长，单位：分钟</param> 
        </member>
        <member name="M:Open.Utils.Helper.CookieHelper.DeleteCookies(System.String)">
            <summary>
            删除指定的cookie
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:Open.Utils.Helper.Enum">
            <summary>
            枚举操作
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Enum.Parse``1(System.Object)">
            <summary>
            获取实例
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名或值,范例:Enum1枚举有成员A=0,则传入"A"或"0"获取 Enum1.A</param>
        </member>
        <member name="M:Open.Utils.Helper.Enum.GetName``1(System.Object)">
            <summary>
            获取成员名
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,则传入Enum1.A或0,获取成员名"A"</param>
        </member>
        <member name="M:Open.Utils.Helper.Enum.GetName(System.Type,System.Object)">
            <summary>
            获取成员名
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Open.Utils.Helper.Enum.GetValue``1(System.Object)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可，范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
        </member>
        <member name="M:Open.Utils.Helper.Enum.GetValue(System.Type,System.Object)">
            <summary>
            获取成员值
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Open.Utils.Helper.Enum.GetDescription``1(System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Open.Utils.Helper.Enum.GetDescription(System.Type,System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Open.Utils.Helper.Enum.GetItems``1">
            <summary>
            获取项集合,文本设置为Description，值为Value
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="M:Open.Utils.Helper.Enum.GetItems(System.Type)">
            <summary>
            获取项集合,文本设置为Description，值为Value
            </summary>
            <param name="type">枚举类型</param>
        </member>
        <member name="M:Open.Utils.Helper.Enum.AddItem(System.Type,System.Collections.Generic.ICollection{Open.Utils.Helper.Item},System.Reflection.FieldInfo)">
            <summary>
            添加描述项
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.FileHelper.BackupDB(System.String)">
            <summary>
            备份数据库
            </summary>
            <param name="cmdText">指定准备备份的文件名 以***.sql为标准</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.FileHelper.RestoreDB(System.String,System.String)">
            <summary>
            还原数据库
            </summary>
            <param name="strPath">指定还原文件***.sql的绝对路径</param>
            <param name="dbName">还原到指定数据库</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.FileHelper.Base64StringToFile(System.String,System.String)">
            <summary>
            Base64转文件
            </summary>
            <param name="strbase64"></param>
            <param name="filepath"></param>
        </member>
        <member name="M:Open.Utils.Helper.FileHelper.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="file">要删除的文件路径和名称</param>
        </member>
        <member name="M:Open.Utils.Helper.FileHelper.DeleteFilesAndFolders(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="file">要删除的文件路径和名称</param>
        </member>
        <member name="M:Open.Utils.Helper.FileHelper.GetFileSize(System.String)">
            <summary>
            获取一个文件的长度,单位为Byte
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:Open.Utils.Helper.FileHelper.ToFileSize(System.Int64)">
            <summary>
            计算文件大小函数(保留两位小数),Size为字节大小
            </summary>
            <param name="size">初始文件大小</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Open.Utils.Helper.FileHelper.GetExcelData(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Open.Utils.Helper.FileHelper.GetWordData(System.String)" -->
        <member name="M:Open.Utils.Helper.GZip.Compress(System.Byte[])">
            <summary>  
            压缩数据  
            </summary>  
            <param name="data"></param>  
            <returns></returns>  
        </member>
        <member name="M:Open.Utils.Helper.GZip.Decompress(System.Byte[])">
            <summary> 
            解压数据  
            </summary>  
            <param name="data"></param>  
            <returns></returns>  
        </member>
        <member name="M:Open.Utils.Helper.ImageHelper.ImageToBytes(System.Drawing.Image)">
            <summary>
            Convert Image to Byte[]
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.ImageHelper.ImageToBytes2(System.Drawing.Image)">
            <summary>
            Convert Image to Byte[]
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.ImageHelper.BytesToImage(System.Byte[])">
            <summary>
            Convert Byte[] to Image
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.ImageHelper.CreateImageFromBytes(System.String,System.Byte[])">
            <summary>
            Convert Byte[] to a picture and Store it in file
            </summary>
            <param name="fileName"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.ImageHelper.SaveImageFromWeb(System.String,System.String,System.String)">
            <summary>
            保存web图片到本地
            </summary>
            <param name="imgUrl">web图片路径</param>
            <param name="path">保存路径</param>
            <param name="fileName">保存文件名</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.ImageHelper.CreateQrCode(System.String,QRCoder.QRCodeGenerator.ECCLevel,System.Int32)">
            <summary>
            创建二维码
            </summary>
            <param name="content">二维码内容</param>
            <param name="level"></param>
            <param name="pixelsPerModule"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Helper.Ioc">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:Open.Utils.Helper.Ioc.DefaultContainer">
            <summary>
            默认容器
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Ioc.CreateContainer(Open.Utils.Dependency.IConfig[])">
            <summary>
            创建容器
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Helper.Ioc.CreateList``1(System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Helper.Ioc.CreateList``1(System.Type,System.String)">
            <summary>
            创建集合
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Helper.Ioc.Create``1(System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Helper.Ioc.Create``1(System.Type,System.String)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="type">对象类型</param>
            <param name="name">服务名称</param>
        </member>
        <member name="M:Open.Utils.Helper.Ioc.BeginScope">
            <summary>
            作用域开始
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Ioc.Register(Open.Utils.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Helper.Ioc.Register(Microsoft.Extensions.DependencyInjection.IServiceCollection,Open.Utils.Dependency.IConfig[])">
            <summary>
            注册依赖
            </summary>
            <param name="services">服务集合</param>
            <param name="configs">依赖配置</param>
        </member>
        <member name="M:Open.Utils.Helper.Ioc.Dispose">
            <summary>
            释放容器
            </summary>
        </member>
        <member name="T:Open.Utils.Helper.Item">
            <summary>
            列表项
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Item.#ctor(System.String,System.Object,System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean})">
            <summary>
            初始化
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
            <param name="sortId">排序号</param>
            <param name="group">组</param>
            <param name="disabled">禁用</param>
        </member>
        <member name="P:Open.Utils.Helper.Item.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Item.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Item.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Item.Group">
            <summary>
            组
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Item.Disabled">
            <summary>
            禁用
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Item.CompareTo(Open.Utils.Helper.Item)">
            <summary>
            比较
            </summary>
            <param name="other">其它列表项</param>
        </member>
        <member name="T:Open.Utils.Helper.Lambda">
            <summary>
            Lambda表达式操作
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetType(System.Linq.Expressions.Expression)">
            <summary>
            获取类型
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            获取成员
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetMemberExpression(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取成员表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="right">取表达式右侧,(l,r) => l.id == r.id，设置为true,返回r.id表达式</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetMethodCallExpressionName(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的成员名称
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetName(System.Linq.Expressions.Expression)">
            <summary>
            获取成员名称，范例：t => t.A.Name,返回 A.Name
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取成员名称
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取名称列表，范例：t => new object[] { t.A.B, t.C },返回A.B,C
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式,范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetLastName(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            获取最后一级成员名称，范例：t => t.A.Name,返回 Name
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
            <param name="right">取表达式右侧,(l,r) => l.LId == r.RId，设置为true,返回RId</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetLastNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取最后一级成员名称列表，范例：t => new object[] { t.A.B, t.C },返回B,C
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式,范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值,范例：t => t.Name == "A",返回 A
            </summary>
            <param name="expression">表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetMethodCallExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetMemberValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取属性表达式的值
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetConstantExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式的值
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetOperator(System.Linq.Expressions.Expression)">
            <summary>
            获取查询操作符,范例：t => t.Name == "A",返回 Operator.Equal
            </summary>
            <param name="expression">表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetMethodCallExpressionOperator(System.Linq.Expressions.Expression)">
            <summary>
            获取方法调用表达式的值
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetParameter(System.Linq.Expressions.Expression)">
            <summary>
            获取参数，范例：t.Name,返回 t
            </summary>
            <param name="expression">表达式，范例：t.Name</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetGroupPredicates(System.Linq.Expressions.Expression)">
            <summary>
            获取分组的谓词表达式，通过Or进行分组
            </summary>
            <param name="expression">谓词表达式</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.CreateGroup(System.Collections.Generic.List{System.Collections.Generic.List{System.Linq.Expressions.Expression}})">
            <summary>
            创建分组
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.AddPredicates(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Collections.Generic.List{System.Linq.Expressions.Expression}},System.Collections.Generic.List{System.Linq.Expressions.Expression})">
            <summary>
            添加通过Or分割的谓词表达式
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetConditionCount(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取查询条件个数
            </summary>
            <param name="expression">谓词表达式,范例1：t => t.Name == "A" ，结果1。
            范例2：t => t.Name == "A" &amp;&amp; t.Age =1 ，结果2。</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetAttribute``1(System.Linq.Expressions.Expression)">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="expression">属性表达式</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetAttribute``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetAttribute``2(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GetAttributes``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.Constant(System.Object,System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式
            </summary>
            <param name="value">值</param>
            <param name="expression">表达式</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.CreateParameter``1">
            <summary>
            创建参数表达式
            </summary>
            <typeparam name="T">参数类型</typeparam>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.Equal``1(System.String,System.Object)">
            <summary>
            创建等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.NotEqual``1(System.String,System.Object)">
            <summary>
            创建不等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.Greater``1(System.String,System.Object)">
            <summary>
            创建大于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建大于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.Less``1(System.String,System.Object)">
            <summary>
            创建小于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.LessEqual``1(System.String,System.Object)">
            <summary>
            创建小于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.Starts``1(System.String,System.Object)">
            <summary>
            调用StartsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.Ends``1(System.String,System.Object)">
            <summary>
            调用EndsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.Contains``1(System.String,System.Object)">
            <summary>
            调用Contains方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Open.Utils.Helper.Lambda.ParsePredicate``1(System.String,System.Object,Open.Utils.Operator)">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="T:Open.Utils.Helper.ModelConvertHelper`1">
            <summary>    
            实体转换辅助类    
            </summary>    
        </member>
        <member name="M:Open.Utils.Helper.PropertyHelper.GetDescription``1(System.String)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="FieldName">属性名称</param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Helper.Reflection">
            <summary>
            反射操作
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetDescription``1">
            <summary>
            获取类型描述，使用DescriptionAttribute设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetDescription``1(System.String)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetDescription(System.Type,System.String)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            获取类型成员描述，使用DescriptionAttribute设置描述
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetDisplayName``1">
            <summary>
            获取显示名称，使用DisplayNameAttribute设置显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>
            获取显示名称，使用DisplayAttribute或DisplayNameAttribute设置显示名称
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetDisplayNameOrDescription``1">
            <summary>
            获取显示名称或描述,使用DisplayNameAttribute设置显示名称,使用DescriptionAttribute设置描述
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetDisplayNameOrDescription(System.Reflection.MemberInfo)">
            <summary>
            获取属性显示名称或描述,使用DisplayAttribute或DisplayNameAttribute设置显示名称,使用DescriptionAttribute设置描述
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetInstancesByInterface``1(System.Reflection.Assembly)">
            <summary>
            获取实现了接口的所有实例
            </summary>
            <typeparam name="TInterface">接口类型</typeparam>
            <param name="assembly">在该程序集中查找</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="type">类型</param>
            <param name="parameters">传递给构造函数的参数</param>        
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetAssembly(System.String)">
            <summary>
            获取程序集
            </summary>
            <param name="assemblyName">程序集名称</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsBool(System.Reflection.MemberInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsBool(System.Reflection.PropertyInfo)">
            <summary>
            是否布尔类型
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsEnum(System.Reflection.MemberInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsEnum(System.Reflection.PropertyInfo)">
            <summary>
            是否枚举类型
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsDate(System.Reflection.MemberInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsDate(System.Reflection.PropertyInfo)">
            <summary>
            是否日期类型
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsInt(System.Reflection.MemberInfo)">
            <summary>
            是否整型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsInt(System.Reflection.PropertyInfo)">
            <summary>
            是否整型
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsNumber(System.Reflection.MemberInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsNumber(System.Reflection.PropertyInfo)">
            <summary>
            是否数值类型
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsCollection(System.Type)">
            <summary>
            是否集合
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.IsGenericCollection(System.Type)">
            <summary>
            是否泛型集合
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetAssemblies(System.String)">
            <summary>
            从目录中获取所有程序集
            </summary>
            <param name="directoryPath">目录绝对路径</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetPublicProperties(System.Object)">
            <summary>
            获取公共属性列表
            </summary>
            <param name="instance">实例</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetTopBaseType``1">
            <summary>
            获取顶级基类
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetTopBaseType(System.Type)">
            <summary>
            获取顶级基类
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:Open.Utils.Helper.Reflection.GetProperties``1(``0)">
            <summary>
            获取实体类里面所有的名称，DESCRIPTION值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Helper.PropertyDescription">
            <summary>
            属性描述
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.PropertyDescription.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.PropertyDescription.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.SerializeHelper.Serialize(System.Object)">
            <summary>
            序列化
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.SerializeHelper.Deserialize``1(System.Byte[])">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Helper.SerializeHelper.ConvertObj``1(StackExchange.Redis.RedisValue)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Helper.Web">
            <summary>
            Web操作
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Web.#cctor">
            <summary>
            初始化Web操作
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.HttpContextAccessor">
            <summary>
            Http上下文访问器
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.Request">
            <summary>
            当前Http请求
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.Response">
            <summary>
            当前Http响应
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.Environment">
            <summary>
            宿主环境
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="F:Open.Utils.Helper.Web._ip">
            <summary>
            Ip地址
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Web.SetIp(System.String)">
            <summary>
            设置Ip地址
            </summary>
            <param name="ip">Ip地址</param>
        </member>
        <member name="M:Open.Utils.Helper.Web.ResetIp">
            <summary>
            重置Ip地址
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.Ip">
            <summary>
            客户端Ip地址
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Web.GetLanIp">
            <summary>
            获取局域网IP
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Web.GetClientHostName">
            <summary>
            获取Web客户端主机名
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Web.GetRemoteAddress">
            <summary>
            获取远程地址
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.RootPath">
            <summary>
            根路径
            </summary>
        </member>
        <member name="P:Open.Utils.Helper.Web.WebRootPath">
            <summary>
            Web根路径，即wwwroot
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Web.GetFiles">
            <summary>
            获取客户端文件集合
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Web.GetFile">
            <summary>
            获取客户端文件
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Web.UrlEncode(System.String,System.Boolean)">
            <summary>
            Url编码
            </summary>
            <param name="url">url</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Open.Utils.Helper.Web.UrlEncode(System.String,System.String,System.Boolean)">
            <summary>
            Url编码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Open.Utils.Helper.Web.UrlEncode(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Url编码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Open.Utils.Helper.Web.GetUpperEncode(System.String)">
            <summary>
            获取大写编码字符串
            </summary>
        </member>
        <member name="M:Open.Utils.Helper.Web.UrlDecode(System.String)">
            <summary>
            Url解码
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:Open.Utils.Helper.Web.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Url解码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Open.Utils.Helper.Web.AddHttpItems(System.String,System.Object)">
            <summary>
            添加链接上下文信息
            </summary>
            <param name="name">名称</param>
            <param name="obj">数据</param>
        </member>
        <member name="M:Open.Utils.Helper.Web.UpdateHttpItem(System.String,System.Object)">
            <summary>
            更新链接上下文信息
            </summary>
            <param name="name">名称</param>
            <param name="data">数据</param>
        </member>
        <member name="M:Open.Utils.Helper.Web.GetHttpItems(System.String)">
            <summary>
            获取链接上下文信息
            </summary>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToInt(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToInt(System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToMoney(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToMoney(System.Object,System.Double)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToString(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToString(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToDecimal(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToDecimal(System.Object,System.Decimal)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToDate(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToDate(System.Object,System.DateTime)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <param name="errorValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.ConvertHelper.ObjToBool(System.Object)">
            <summary>
            
            </summary>
            <param name="thisValue"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IPHelper.IsIP(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SysHelper.GetIndexResx(System.String)">
            <summary>
            获取提示信息
            </summary>
            <param name="resxName"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SysHelper.GetIndexUrls(System.String,System.String)">
            <summary>
            获取地址信息
            </summary>
            <param name="controller"></param>
            <param name="NameSpace"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.SysHelper.LevelName(System.String,System.Boolean,System.Nullable{System.Decimal})">
            <summary>
            显示错层方法
            </summary>
        </member>
        <member name="M:Open.Utils.WebHelper.HtmlEncode(System.String)">
            <summary>
            对html字符串进行编码
            </summary>
            <param name="html">html字符串</param>
        </member>
        <member name="M:Open.Utils.WebHelper.HtmlDecode(System.String)">
            <summary>
            对html字符串进行解码
            </summary>
            <param name="html">html字符串</param>
        </member>
        <member name="M:Open.Utils.WebHelper.UrlEncode(System.String,System.Boolean)">
            <summary>
            对Url进行编码
            </summary>
            <param name="url">url</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Open.Utils.WebHelper.UrlEncode(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            对Url进行编码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Open.Utils.WebHelper.GetUpperEncode(System.String)">
            <summary>
            获取大写编码字符串
            </summary>
        </member>
        <member name="M:Open.Utils.WebHelper.UrlDecode(System.String)">
            <summary>
            对Url进行解码,对于javascript的encodeURIComponent函数编码参数,应使用utf-8字符编码来解码
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:Open.Utils.WebHelper.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            对Url进行解码,对于javascript的encodeURIComponent函数编码参数,应使用utf-8字符编码来解码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码,对于javascript的encodeURIComponent函数编码参数,应使用utf-8字符编码来解码</param>
        </member>
        <member name="M:Open.Utils.WebHelper.WriteSession(System.String,System.String)">
            <summary>
            写Session
            </summary>
            <param name="key">Session的键名</param>
            <param name="value">Session的键值</param>
        </member>
        <member name="M:Open.Utils.WebHelper.GetSession(System.String)">
            <summary>
            读取Session的值
            </summary>
            <param name="key">Session的键名</param>        
        </member>
        <member name="M:Open.Utils.WebHelper.RemoveSession(System.String)">
            <summary>
            删除指定Session
            </summary>
            <param name="key">Session的键名</param>
        </member>
        <member name="M:Open.Utils.WebHelper.WriteCookie(System.String,System.String)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
        </member>
        <member name="M:Open.Utils.WebHelper.WriteCookie(System.String,System.String,System.Int32)">
            <summary>
            写cookie值
            </summary>
            <param name="strName">名称</param>
            <param name="strValue">值</param>
            <param name="strValue">过期时间(分钟)</param>
        </member>
        <member name="M:Open.Utils.WebHelper.GetCookie(System.String)">
            <summary>
            读cookie值
            </summary>
            <param name="strName">名称</param>
            <returns>cookie值</returns>
        </member>
        <member name="M:Open.Utils.WebHelper.RemoveCookie(System.String)">
            <summary>
            删除Cookie对象
            </summary>
            <param name="CookiesName">Cookie对象名称</param>
        </member>
        <member name="M:Open.Utils.WebHelper.HttpWebRequest(System.String)">
            <summary>
            请求网络资源,返回响应的文本
            </summary>
            <param name="url">网络资源地址</param>
        </member>
        <member name="M:Open.Utils.WebHelper.HttpWebRequest(System.String,System.String)">
            <summary>
            请求网络资源,返回响应的文本
            </summary>
            <param name="url">网络资源Url地址</param>
            <param name="parameters">提交的参数,格式：参数1=参数值1&amp;参数2=参数值2</param>
        </member>
        <member name="M:Open.Utils.WebHelper.HttpWebRequest(System.String,System.String,System.Text.Encoding,System.Boolean,System.String,System.Net.CookieContainer,System.Int32)">
            <summary>
            请求网络资源,返回响应的文本
            </summary>
            <param name="url">网络资源地址</param>
            <param name="parameters">提交的参数,格式：参数1=参数值1&amp;参数2=参数值2</param>
            <param name="encoding">字符编码</param>
            <param name="isPost">是否Post提交</param>
            <param name="contentType">内容类型</param>
            <param name="cookie">Cookie容器</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:Open.Utils.WebHelper.NoHtml(System.String)">
            <summary>
            去除HTML标记
            </summary>
            <param name="NoHTML">包括HTML的源码 </param>
            <returns>已经去除后的文字</returns>
        </member>
        <member name="M:Open.Utils.WebHelper.Formatstr(System.String)">
            <summary>
            格式化文本（防止SQL注入）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Open.Utils.BaseConfigModel.Configuration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Open.Utils.BaseConfigModel.ContentRootPath">
            <summary>
            
            </summary>
        </member>
        <member name="P:Open.Utils.BaseConfigModel.WebRootPath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Open.Utils.BaseConfigModel.SetBaseConfig(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <param name="contentRootPath"></param>
            <param name="webRootPath"></param>
        </member>
        <member name="P:Open.Utils.JwtAuthConfigModel.WebExp">
            <summary>
            web应用过期12小时
            </summary>
        </member>
        <member name="P:Open.Utils.JwtAuthConfigModel.AppExp">
            <summary>
            APP应用过期12小时
            </summary>
        </member>
        <member name="P:Open.Utils.JwtAuthConfigModel.MiniProgramExp">
            <summary>
            小程序应用过期12小时
            </summary>
        </member>
        <member name="P:Open.Utils.JwtAuthConfigModel.OtherExp">
            <summary>
            其他应用过期12小时
            </summary>
        </member>
        <member name="M:Open.Utils.JwtHelper.IssueJWT(Open.Utils.TokenModel)">
            <summary>
            颁发JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.JwtHelper.SerializeJWT(System.String)">
            <summary>
            解析
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.TokenModel">
            <summary>
            令牌
            </summary>
        </member>
        <member name="P:Open.Utils.TokenModel.Uid">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Open.Utils.TokenModel.Role">
            <summary>
            身份
            </summary>
        </member>
        <member name="P:Open.Utils.TokenModel.Project">
            <summary>
            项目名称
            </summary>
        </member>
        <member name="P:Open.Utils.TokenModel.TokenType">
            <summary>
            令牌类型
            </summary>
        </member>
        <member name="M:Open.Utils.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
             <summary>
            
             </summary>
             <param name="next"></param>
        </member>
        <member name="M:Open.Utils.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
             <summary>
            
             </summary>
             <param name="httpContext"></param>
             <returns></returns>
        </member>
        <member name="T:Open.Utils.ILogHelper">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:Open.Utils.ILogHelper.Debug(System.Object,System.String)">
            <summary>
            调试信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Debug(System.Object,System.String,System.Object[])">
            <summary>
            调试信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="ps">ps</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Debug(System.Type,System.String)">
            <summary>
            调试信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Info(System.Object,System.Object)">
            <summary>
            关键信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Info(System.Type,System.Object)">
            <summary>
            关键信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Warn(System.Object,System.Object)">
            <summary>
            警告信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Warn(System.Type,System.Object)">
            <summary>
            警告信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Error(System.String,System.String)">
            <summary>
            错误信息
            </summary>
            <param name="Method">方法</param>
            <param name="message">具体信息</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Error(System.Object,System.Exception)">
            <summary>
            错误信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Error(System.Type,System.Object)">
            <summary>
            错误信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Fatal(System.Object,System.Object)">
            <summary>
            失败信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Fatal(System.Type,System.Object)">
            <summary>
            失败信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Debug(System.Object,System.Object,System.Exception)">
            <summary>
            调试信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Debug(System.Type,System.Object,System.Exception)">
            <summary>
            调试信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Info(System.Object,System.Object,System.Exception)">
            <summary>
            关键信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Info(System.Type,System.Object,System.Exception)">
            <summary>
            关键信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Warn(System.Object,System.Object,System.Exception)">
            <summary>
            警告信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Warn(System.Type,System.Object,System.Exception)">
            <summary>
            警告信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Error(System.Object,System.Object,System.Exception)">
            <summary>
            错误信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Error(System.Type,System.Object,System.Exception)">
            <summary>
            错误信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Fatal(System.Object,System.Object,System.Exception)">
            <summary>
            失败信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="M:Open.Utils.ILogHelper.Fatal(System.Type,System.Object,System.Exception)">
            <summary>
            失败信息
            </summary>
            <param name="source">source</param>
            <param name="message">message</param>
            <param name="exception">ex</param>
        </member>
        <member name="T:Open.Utils.Logs">
            <summary>
            日志相关
            </summary>
        </member>
        <member name="P:Open.Utils.Logs.DefaultLogPath">
            <summary>
            日志开始
            </summary>
            <returns></returns>
        </member>
        <member name="P:Open.Utils.Logs.FileSize">
            <summary>
            文件路径
            </summary>
            <returns></returns>
        </member>
        <member name="P:Open.Utils.Logs.DelDays">
            <summary>
            日期删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Logs.IsDirectory(System.String)">
            <summary>
            文件路径判断
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Logs.isLogFile(System.String,System.String)">
            <summary>
            文件路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Logs.GetFilePath(System.String,System.String)">
            <summary>
            文件路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Logs.WriteLog(System.String)">
            <summary>
            日志内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Logs.WriteLog(System.String,System.String,System.String)">
            <summary>
            日志开始
            </summary>
            <param name="filePath">日志文件路径</param>
             <param name="fileName">日志文件名称</param>
              <param name="fileContent">日志内容</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Logs.DelLog">
            <summary>
            删除日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.HttpMethods.HttpPost(System.String,System.String)">
            <summary>
            HTTP POST方式请求数据
            </summary>
            <param name="url">URL.</param>
            <param name="param">POST的数据</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.HttpMethods.HttpPut(System.String,System.String)">
            <summary>
            HTTP Put方式请求数据.
            </summary>
            <param name="url">URL.</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.HttpMethods.HttpDelete(System.String,System.String)">
            <summary>
            HTTP Delete方式请求数据.
            </summary>
            <param name="url">URL.</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.HttpMethods.HttpGet(System.String,System.Collections.Hashtable)">
            <summary>
            HTTP GET方式请求数据.
            </summary>
            <param name="url">URL.</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.HttpMethods.HttpPost(System.String,System.Collections.Generic.IDictionary{System.Object,System.Object},System.Byte[])">
            <summary>
            HTTP POST方式请求数据(带图片)
            </summary>
            <param name="url">URL</param>        
            <param name="param">POST的数据</param>
            <param name="fileByte">图片</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.HttpMethods.CreateHttpClient(System.String)">
            <summary>
            创建HttpClient
            </summary>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Net">
            <summary>
            网络操作
            </summary>
        </member>
        <member name="M:Open.Utils.Net.GetIp">
            <summary>
            获得IP地址
            </summary>
            <returns>字符串数组</returns>
        </member>
        <member name="M:Open.Utils.Net.NetCardInfo">
            <summary>
            返回描述本地计算机上的网络接口的对象(网络接口也称为网络适配器)。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Net.GetMacByNetworkInterface">
            <summary>
             通过NetworkInterface读取网卡Mac
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Net.GetLocation(System.String)">
            <summary>
            获取IP地址信息
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Net.obj">
            <summary>
            百度接口
            </summary>
        </member>
        <member name="T:Open.Utils.Net.objex">
            <summary>
            聚合数据
            </summary>
        </member>
        <member name="P:Open.Utils.OperatorModel.LoginIPAddress">
            <summary>
            登录IP地址
            </summary>
        </member>
        <member name="P:Open.Utils.OperatorModel.LoginIPAddressName">
            <summary>
            登录地址
            </summary>
        </member>
        <member name="P:Open.Utils.OperatorModel.LoginToken">
            <summary>
            登录Token值
            </summary>
        </member>
        <member name="P:Open.Utils.OperatorModel.LoginTime">
            <summary>
            登录时间
            </summary>
        </member>
        <member name="P:Open.Utils.OperatorModel.IsSystem">
            <summary>
            是否系统管理员
            </summary>
        </member>
        <member name="P:Open.Utils.OperatorModel.IsRemeberMe">
            <summary>
            记住登录
            </summary>
        </member>
        <member name="M:Open.Utils.OperatorProvider.IsOnLine">
            <summary>
            判断登录状态
            </summary>
            <param name="token">登录票据</param>
            <param name="loginMark">登录设备标识</param>
            <returns>-1未登录,1登录成功,0登录过期</returns>
        </member>
        <member name="P:Open.Utils.OperatorResult.stateCode">
            <summary>
            状态码-1未登录,1登录成功,0登录过期
            </summary>
        </member>
        <member name="T:Open.Utils.Permission">
            <summary>
            用户或角色或其他凭据实体
            </summary>
        </member>
        <member name="P:Open.Utils.Permission.Role">
            <summary>
            用户或角色或其他凭据名称
            </summary>
        </member>
        <member name="P:Open.Utils.Permission.Url">
            <summary>
            请求Url
            </summary>
        </member>
        <member name="T:Open.Utils.PermissionRequirement">
            <summary>
            必要参数类，
            继承 IAuthorizationRequirement，用于设计自定义权限处理器PermissionHandler
            因为AuthorizationHandler 中的泛型参数 TRequirement 必须继承 IAuthorizationRequirement
            </summary>
        </member>
        <member name="P:Open.Utils.PermissionRequirement.Permissions">
            <summary>
            用户权限集合
            </summary>
        </member>
        <member name="P:Open.Utils.PermissionRequirement.DeniedAction">
            <summary>
            无权限action
            </summary>
        </member>
        <member name="P:Open.Utils.PermissionRequirement.ClaimType">
            <summary>
            认证授权类型
            </summary>
        </member>
        <member name="P:Open.Utils.PermissionRequirement.LoginPath">
            <summary>
            请求路径
            </summary>
        </member>
        <member name="P:Open.Utils.PermissionRequirement.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:Open.Utils.PermissionRequirement.Audience">
            <summary>
            订阅人
            </summary>
        </member>
        <member name="P:Open.Utils.PermissionRequirement.Expiration">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:Open.Utils.PermissionRequirement.SigningCredentials">
            <summary>
            签名验证
            </summary>
        </member>
        <member name="M:Open.Utils.PermissionRequirement.#ctor(System.String,System.Collections.Generic.List{Open.Utils.Permission},System.String,System.String,System.String,Microsoft.IdentityModel.Tokens.SigningCredentials,System.TimeSpan)">
            <summary>
            构造
            </summary>
            <param name="deniedAction">拒约请求的url</param>
            <param name="permissions">权限集合</param>
            <param name="claimType">声明类型</param>
            <param name="issuer">发行人</param>
            <param name="audience">订阅人</param>
            <param name="signingCredentials">签名验证实体</param>
            <param name="expiration">过期时间</param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringSet(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringGet(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringGet(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringGet``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringIncrement(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringDecrement(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringSetAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringSetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringGetAsync(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringGetAsync(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringGetAsync``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringIncrementAsync(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.StringDecrementAsync(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashExists(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashSet``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashDelete(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashDelete(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashGet``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashIncrement(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashDecrement(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashKeys``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashExistsAsync(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashDeleteAsync(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashDeleteAsync(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashGeAsync``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashIncrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashDecrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.HashKeysAsync``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListRemove``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListRange``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListRightPush``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListRightPop``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListLeftPush``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListLeftPop``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListRemoveAsync``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListRangeAsync``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListRightPushAsync``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListRightPopAsync``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListLeftPopAsync``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.ListLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.SortedSetRemove``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.SortedSetRangeByRank``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.SortedSetLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.SortedSetRemoveAsync``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.SortedSetRangeByRankAsync``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.SortedSetLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">redis key</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.KeyDelete(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个key
            </summary>
            <param name="keys">rediskey</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.KeyExists(System.String)">
            <summary>
            判断key是否存储
            </summary>
            <param name="key">redis key</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.KeyRename(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="key">就的redis key</param>
            <param name="newKey">新的redis key</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置Key的时间
            </summary>
            <param name="key">redis key</param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.Subscribe(System.String,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            Redis发布订阅  订阅
            </summary>
            <param name="subChannel"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.Publish``1(System.String,``0)">
            <summary>
            Redis发布订阅  发布
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.Unsubscribe(System.String)">
            <summary>
            Redis发布订阅  取消订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.UnsubscribeAll">
            <summary>
            Redis发布订阅  取消全部订阅
            </summary>
        </member>
        <member name="M:Open.Utils.IRedisCacheManager.SetSysCustomKey(System.String)">
            <summary>
            设置前缀
            </summary>
            <param name="customKey"></param>
        </member>
        <member name="P:Open.Utils.RedisCacheId.attachement">
            <summary>
            附件
            </summary>
        </member>
        <member name="P:Open.Utils.RedisCacheId.excel">
            <summary>
            excel导入
            </summary>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.Clear">
            <summary>
            清除
            </summary>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.Get(System.String)">
            <summary>
            判断是否存在
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.GetValue(System.String)">
            <summary>
            查询
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.Get``1(System.String)">
            <summary>
            获取
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.Remove(System.String)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SetValue(System.String,System.Byte[])">
            <summary>
            增加/修改
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringSet(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringSet(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringSet``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringGet(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringGet(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringGet``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringIncrement(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringDecrement(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringSetAsync(System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            保存单个key value
            </summary>
            <param name="key">Redis Key</param>
            <param name="value">保存的值</param>
            <param name="expiry">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringSetAsync(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{StackExchange.Redis.RedisKey,StackExchange.Redis.RedisValue}})">
            <summary>
            保存多个key value
            </summary>
            <param name="keyValues">键值对</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringSetAsync``1(System.String,``0,System.Nullable{System.TimeSpan})">
            <summary>
            保存一个对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringGetAsync(System.String)">
            <summary>
            获取单个key的值
            </summary>
            <param name="key">Redis Key</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringGetAsync(System.Collections.Generic.List{System.String})">
            <summary>
            获取多个Key
            </summary>
            <param name="listKey">Redis Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringGetAsync``1(System.String)">
            <summary>
            获取一个key的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringIncrementAsync(System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.StringDecrementAsync(System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashExists(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashSet``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashDelete(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashDelete(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashGet``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashIncrement(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashDecrement(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashKeys``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashExistsAsync(System.String,System.String)">
            <summary>
            判断某个数据是否已经被缓存
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashSetAsync``1(System.String,System.String,``0)">
            <summary>
            存储数据到hash表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashDeleteAsync(System.String,System.String)">
            <summary>
            移除hash中的某值
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashDeleteAsync(System.String,System.Collections.Generic.List{StackExchange.Redis.RedisValue})">
            <summary>
            移除hash中的多个值
            </summary>
            <param name="key"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashGeAsync``1(System.String,System.String)">
            <summary>
            从hash表获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="dataKey"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashIncrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字增长val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>增长后的值</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashDecrementAsync(System.String,System.String,System.Double)">
            <summary>
            为数字减少val
            </summary>
            <param name="key"></param>
            <param name="dataKey"></param>
            <param name="val">可以为负</param>
            <returns>减少后的值</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.HashKeysAsync``1(System.String)">
            <summary>
            获取hashkey所有Redis key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListRemove``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListRange``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListRightPush``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListRightPop``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListLeftPush``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListLeftPop``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListRemoveAsync``1(System.String,``0)">
            <summary>
            移除指定ListId的内部List的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListRangeAsync``1(System.String)">
            <summary>
            获取指定key的List
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListRightPushAsync``1(System.String,``0)">
            <summary>
            入队
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListRightPopAsync``1(System.String)">
            <summary>
            出队
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListLeftPushAsync``1(System.String,``0)">
            <summary>
            入栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListLeftPopAsync``1(System.String)">
            <summary>
            出栈
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.ListLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SortedSetAdd``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SortedSetRemove``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SortedSetRangeByRank``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SortedSetLength(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SortedSetAddAsync``1(System.String,``0,System.Double)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="score"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SortedSetRemoveAsync``1(System.String,``0)">
            <summary>
            删除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SortedSetRangeByRankAsync``1(System.String)">
            <summary>
            获取全部
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SortedSetLengthAsync(System.String)">
            <summary>
            获取集合中的数量
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.KeyDelete(System.String)">
            <summary>
            删除单个key
            </summary>
            <param name="key">redis key</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.KeyDelete(System.Collections.Generic.List{System.String})">
            <summary>
            删除多个key
            </summary>
            <param name="keys">rediskey</param>
            <returns>成功删除的个数</returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.KeyExists(System.String)">
            <summary>
            判断key是否存储
            </summary>
            <param name="key">redis key</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.KeyRename(System.String,System.String)">
            <summary>
            重新命名key
            </summary>
            <param name="key">就的redis key</param>
            <param name="newKey">新的redis key</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.KeyExpire(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            设置Key的时间
            </summary>
            <param name="key">redis key</param>
            <param name="expiry"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.Subscribe(System.String,System.Action{StackExchange.Redis.RedisChannel,StackExchange.Redis.RedisValue})">
            <summary>
            Redis发布订阅  订阅
            </summary>
            <param name="subChannel"></param>
            <param name="handler"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.Publish``1(System.String,``0)">
            <summary>
            Redis发布订阅  发布
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channel"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.Unsubscribe(System.String)">
            <summary>
            Redis发布订阅  取消订阅
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.UnsubscribeAll">
            <summary>
            Redis发布订阅  取消全部订阅
            </summary>
        </member>
        <member name="M:Open.Utils.RedisCacheManager.SetSysCustomKey(System.String)">
            <summary>
            设置前缀
            </summary>
            <param name="customKey"></param>
        </member>
        <member name="T:Open.Utils.RedisConnection">
            <summary>
            ConnectionMultiplexer对象管理帮助类
            </summary>
        </member>
        <member name="P:Open.Utils.RedisConnection.Instance">
            <summary>
            单例获取
            </summary>
        </member>
        <member name="M:Open.Utils.RedisConnection.GetConnectionMultiplexer(System.String)">
            <summary>
            缓存获取
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.RedisConnection.MuxerConfigurationChanged(System.Object,StackExchange.Redis.EndPointEventArgs)">
            <summary>
            配置更改时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Open.Utils.RedisConnection.MuxerErrorMessage(System.Object,StackExchange.Redis.RedisErrorEventArgs)">
            <summary>
            发生错误时
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Open.Utils.RedisConnection.MuxerConnectionRestored(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            重新建立连接之前的错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Open.Utils.RedisConnection.MuxerConnectionFailed(System.Object,StackExchange.Redis.ConnectionFailedEventArgs)">
            <summary>
            连接失败 ， 如果重新连接成功你将不会收到这个通知
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Open.Utils.RedisConnection.MuxerHashSlotMoved(System.Object,StackExchange.Redis.HashSlotMovedEventArgs)">
            <summary>
            更改集群
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Open.Utils.RedisConnection.MuxerInternalError(System.Object,StackExchange.Redis.InternalErrorEventArgs)">
            <summary>
            redis类库错误
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Open.Utils.Reflections.Finder">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="F:Open.Utils.Reflections.Finder.SkipAssemblies">
            <summary>
            跳过的程序集
            </summary>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.GetAssemblies">
            <summary>
            获取程序集列表
            </summary>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.GetAssembliesFromCurrentAppDomain">
            <summary>
            从当前应用程序域获取程序集列表
            </summary>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.Match(System.Reflection.Assembly)">
            <summary>
            程序集是否匹配
            </summary>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.LoadAssemblies(System.String)">
            <summary>
            加载程序集到当前应用程序域
            </summary>
            <param name="path">目录绝对路径</param>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.Match(System.String)">
            <summary>
            程序集是否匹配
            </summary>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.GetTypes(System.Type,System.Reflection.Assembly)">
            <summary>
            获取类型列表
            </summary>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.AddType(System.Collections.Generic.List{System.Type},System.Type,System.Type)">
            <summary>
            添加类型
            </summary>
        </member>
        <member name="M:Open.Utils.Reflections.Finder.MatchGeneric(System.Type,System.Type)">
            <summary>
            泛型匹配
            </summary>
        </member>
        <member name="T:Open.Utils.Reflections.IFind">
            <summary>
            类型查找器
            </summary>
        </member>
        <member name="M:Open.Utils.Reflections.IFind.GetAssemblies">
            <summary>
            获取程序集列表
            </summary>
        </member>
        <member name="M:Open.Utils.Reflections.IFind.Find``1(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <typeparam name="T">查找类型</typeparam>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Open.Utils.Reflections.IFind.Find(System.Type,System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            查找类型列表
            </summary>
            <param name="findType">查找类型</param>
            <param name="assemblies">在指定的程序集列表中查找</param>
        </member>
        <member name="M:Open.Utils.DESEncrypt.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.DESEncrypt.Encrypt(System.String,System.String)">
            <summary> 
            加密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:Open.Utils.DESEncrypt.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.DESEncrypt.Decrypt(System.String,System.String)">
            <summary> 
            解密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="T:Open.Utils.Sms.SmsHelper">
            <summary>
            阿里短信发送
            </summary>
        </member>
        <member name="M:Open.Utils.Sms.SmsHelper.SendSms(System.String,System.String,System.String,Open.Utils.Sms.SmsSettingModel)">
            <summary>
            短信验证码
            </summary>
            <param name="mobile"></param>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Sms.SmsHelper.GetHtmlFormUrl(System.String)">
            <summary>
            短信接口C#调用方法
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Sms.SmsHelper.IsMobile(System.String)">
            <summary>
            验证手机号码是否合法
            </summary>
            <param name="mobile">电话号码</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Sms.SmsHelper.specialUrlEncode(System.String)">
            <summary>
            URL编码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Sms.SmsHelper.MySign(System.String,System.String)">
            <summary>
            HMACSHA1签名
            </summary>
            <param name="accessSecret"></param>
            <param name="stringToSign"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Sms.SmsHelper.strToToHexByte(System.String)">
            <summary>
            字符串转16进制字节数组
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Sms.SmsHelper.MessageHandle(System.String)">
            <summary>
            消息处理机制
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Swagger.CustomApiVersion">
            <summary>
            自定义版本
            </summary>
        </member>
        <member name="T:Open.Utils.Swagger.CustomApiVersion.ApiVersions">
            <summary>
            Api接口版本 自定义
            </summary>
        </member>
        <member name="F:Open.Utils.Swagger.CustomApiVersion.ApiVersions.v1">
            <summary>
            v1 版本
            </summary>
        </member>
        <member name="F:Open.Utils.Swagger.CustomApiVersion.ApiVersions.v2">
            <summary>
            v2 版本
            </summary>
        </member>
        <member name="M:Open.Utils.DateTimeDiff.DiffTimes(System.DateTime,System.DateTime,Open.Utils.DiffResultFormat)">
            <summary>
            计算日期间隔
            </summary>
            <param name="startDate">开始时间</param>
            <param name="endDate">结束时间</param>
            <param name="drf">决定返回值形式的枚举</param>
            <returns>年月日的int数组，具体数组长度与枚举参数drf有关</returns>
        </member>
        <member name="M:Open.Utils.DateTimeDiff.DiffTimesDay(System.DateTime,System.DateTime)">
            <summary>
            两个日期间隔的天数
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Open.Utils.DiffResultFormat" -->
        <member name="F:Open.Utils.DiffResultFormat.yy">
            <summary>
            年数
            </summary>
        </member>
        <member name="F:Open.Utils.DiffResultFormat.hh">
            <summary>
            半年
            </summary>
        </member>
        <member name="F:Open.Utils.DiffResultFormat.qq">
            <summary>
            季度
            </summary>
        </member>
        <member name="F:Open.Utils.DiffResultFormat.mm">
            <summary>
            月数
            </summary>
        </member>
        <member name="F:Open.Utils.DiffResultFormat.dd">
            <summary>
            天数
            </summary>
        </member>
        <member name="T:Open.Utils.DateTimeExt">
            <summary>
            时间扩展操作类
            </summary>
        </member>
        <member name="M:Open.Utils.DateTimeExt.IsWeekend(System.DateTime)">
            <summary>
            当前时间是否周末
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.DateTimeExt.IsWeekday(System.DateTime)">
            <summary>
            当前时间是否工作日
            </summary>
            <param name="dateTime">时间点</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.DateTimeExt.ToUniqueString(System.DateTime,System.Boolean)">
            <summary>
            获取时间相对唯一字符串
            </summary>
            <param name="dateTime"></param>
            <param name="milsec">是否使用毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.DateTimeExt.ToJsGetTime(System.DateTime)">
            <summary>
            将时间转换为JS时间格式(Date.getTime())
            </summary>
        </member>
        <member name="M:Open.Utils.DateTimeExt.GetGroupWeekByDateRange(System.DateTime,System.DateTime)">
            <summary>  
            根据时间范围获取每年每月每周的分组  
            </summary>  
            <param name="strStartDate">起始时间</param>  
            <param name="strEndDate">结束时间</param>  
            <returns>返回每周起始结束键值对</returns>  
        </member>
        <member name="M:Open.Utils.DateTimeExt.GetGroupWeekByYear(System.Collections.Generic.Dictionary{System.DateTime,System.DateTime},System.DateTime,System.DateTime)">
            <summary>
            根据时间范围(年)获取每月分组  
            </summary>
            <param name="dict"></param>
            <param name="dtStartDate"></param>
            <param name="dtEndDate"></param>
        </member>
        <member name="M:Open.Utils.DateTimeExt.GetAmountDateList(System.Int32,System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            计算应收日期及所属期
            CybleBeginDate:周期实际的起始日
            CybleEndDate:周期实际的结束日。
            CW_F_CalDateTable_CLR(3,1,'2013-01-15','2014-05-14',2,0,0,2)
            </summary>
            <param name="UnitType">周期单位</param>
            <param name="Cycle">周期</param>
            <param name="BeginDate">起始日期</param>
            <param name="EndDate">截止日期</param>
            <param name="ExesType">应收类别,1代表提前,2代表延后,4代表本期,</param>
            <param name="ExesMonth">指定月份,0代表本期</param>
            <param name="AccDate">指定应收天数,0代表每期最后一天</param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.DateTimeRange">
            <summary>
            表示一个时间范围
            </summary>
        </member>
        <member name="M:Open.Utils.DateTimeRange.#ctor">
            <summary>
            初始化一个<see cref="T:Open.Utils.DateTimeRange"/>类型的新实例
            </summary>
        </member>
        <member name="M:Open.Utils.DateTimeRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            初始化一个<see cref="T:Open.Utils.DateTimeRange"/>类型的新实例
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.StartTime">
            <summary>
            获取或设置 起始时间
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.EndTime">
            <summary>
            获取或设置 结束时间
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.Yesterday">
            <summary>
            获取 昨天的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.Today">
            <summary>
            获取 今天的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.Tomorrow">
            <summary>
            获取 明天的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.LastWeek">
            <summary>
            获取 上周的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.ThisWeek">
            <summary>
            获取 本周的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.NextWeek">
            <summary>
            获取 下周的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.LastMonth">
            <summary>
            获取 上个月的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.ThisMonth">
            <summary>
            获取 本月的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.NextMonth">
            <summary>
            获取 下个月的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.LastYear">
            <summary>
            获取 上一年的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.ThisYear">
            <summary>
            获取 本年的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.NextYear">
            <summary>
            获取 下一年的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.Last30Days">
            <summary>
            获取 相对当前时间过去30天的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.Last30DaysExceptToday">
            <summary>
            获取 截止到昨天的最近30天的天数范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.Last7Days">
            <summary>
            获取 相对当前时间过去7天的时间范围
            </summary>
        </member>
        <member name="P:Open.Utils.DateTimeRange.Last7DaysExceptToday">
            <summary>
            获取 截止到昨天的最近7天的天数范围
            </summary>
        </member>
        <member name="M:Open.Utils.DateTimeRange.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
        </member>
        <member name="P:Open.Utils.Time.Now">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:Open.Utils.Time.ShortDate">
            <summary>
            短日期格式(yyyy/MM/dd)
            </summary>
        </member>
        <member name="P:Open.Utils.Time.LongDate">
            <summary>
            长日期格式(yyyy月MM日dd日)
            </summary>
        </member>
        <member name="P:Open.Utils.Time.ShortDateTime">
            <summary>
            日期时间(yyyy/MM/dd HH:mm)
            </summary>
        </member>
        <member name="P:Open.Utils.Time.LongDateTime">
            <summary>
            日期时间(yyyy年MM月dd日 HH时mm分)
            </summary>
        </member>
        <member name="P:Open.Utils.Time.LongTime">
            <summary>
            日期时间(yyyy年MM月dd日 HH时mm分)
            </summary>
        </member>
        <member name="P:Open.Utils.Time.ShortTime">
            <summary>
            日期时间(yyyy年MM月dd日 HH时mm分)
            </summary>
        </member>
        <member name="M:Open.Utils.Time.GetToday">
            <summary>
            当前日期
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.GetToday(System.String)">
            <summary>
            当前日期自定义格式
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.GetDate(System.Int32)">
            <summary>
            当前日期 加添加，减天数 -1、1
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.GetDate(System.Int32,System.String)">
            <summary>
             当前日期 加添加，减天数 -1、1
            </summary>
            <param name="i"></param>
            <param name="dateformat">返回的时间格式</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.GetDaysOfYear(System.Int32)">
            <summary>返回本年有多少天</summary>
            <param name="iYear">年份</param>
            <returns>本年的天数</returns>
        </member>
        <member name="M:Open.Utils.Time.GetDaysOfYear(System.DateTime)">
            <summary>本年有多少天</summary>
            <param name="dt">日期</param>
            <returns>本天在当年的天数</returns>
        </member>
        <member name="M:Open.Utils.Time.GetDaysOfMonth(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            根据本月开始日获取下个月的截至日是几号
            </summary>
            <param name="Year">年</param>
            <param name="Month">月</param>
            <param name="Day">日</param>
            <param name="beginDateAlwaysNumber1">开始日期始终是1号</param>
            <returns>天数</returns>
        </member>
        <member name="M:Open.Utils.Time.GetDaysOfMonth(System.DateTime,System.Int32)">
            <summary>本月有多少天</summary>
            <param name="dt">日期</param>
            <returns>天数</returns>
        </member>
        <member name="M:Open.Utils.Time.GetWeekNameOfDay(System.DateTime)">
            <summary>返回当前日期的星期名称</summary>
            <param name="dt">日期</param>
            <returns>星期名称</returns>
        </member>
        <member name="M:Open.Utils.Time.GetWeekNumberOfDay(System.DateTime)">
            <summary>返回当前日期的星期编号</summary>
            <param name="dt">日期</param>
            <returns>星期数字编号</returns>
        </member>
        <member name="M:Open.Utils.Time.GetWeekAmount(System.Int32)">
            <summary>
            获取某一年有多少周
            </summary>
            <param name="year">年份</param>
            <returns>该年周数</returns>
        </member>
        <member name="M:Open.Utils.Time.GetWeekOfYear(System.DateTime)">
            <summary>
            获取某一日期是该年中的第几周
            </summary>
            <param name="dt">日期</param>
            <returns>该日期在该年中的周数</returns>
        </member>
        <member name="M:Open.Utils.Time.WeekRange(System.Int32,System.Int32,System.DateTime@,System.DateTime@)">
            <summary>
            根据某年的第几周获取这周的起止日期
            </summary>
            <param name="year"></param>
            <param name="weekOrder"></param>
            <param name="firstDate"></param>
            <param name="lastDate"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.DiffYearMonth(System.DateTime,System.DateTime)">
            <summary>
            计算两个时间年份月份差
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.DiffMonth(System.DateTime,System.DateTime)">
            <summary>
            计算两个时间年份月份差
            </summary>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.DiffDays(System.DateTime,System.DateTime)">
            <summary>
            返回两个日期之间相差的天数
            </summary>
            <param name="dtfrm">两个日期参数</param>
            <param name="dtto">两个日期参数</param>
            <returns>天数</returns>
        </member>
        <member name="M:Open.Utils.Time.DiffHours(System.DateTime,System.DateTime)">
            <summary>
            返回两个日期之间相差的小时数
            </summary>
            <param name="dtfrm">两个日期参数</param>
            <param name="dtto">两个日期参数</param>
            <returns>小时数</returns>
        </member>
        <member name="M:Open.Utils.Time.DiffMinutes(System.DateTime,System.DateTime)">
            <summary>
            返回两个日期之间相差的分钟数
            </summary>
            <param name="dtfrm">两个日期参数</param>
            <param name="dtto">两个日期参数</param>
            <returns>分钟数</returns>
        </member>
        <member name="M:Open.Utils.Time.IsRuYear(System.Int32)">
            <summary>判断当前年份是否是闰年，私有函数</summary>
            <param name="iYear">年份</param>
            <returns>是闰年：True ，不是闰年：False</returns>
        </member>
        <member name="M:Open.Utils.Time.ToDate(System.String)">
            <summary>
            将输入的字符串转化为日期。如果字符串的格式非法，则返回当前日期。
            </summary>
            <param name="strInput">输入字符串</param>
            <returns>日期对象</returns>
        </member>
        <member name="M:Open.Utils.Time.ToString(System.DateTime,System.String)">
            <summary>
            将日期对象转化为格式字符串
            </summary>
            <param name="oDateTime">日期对象</param>
            <param name="strFormat">
            格式：
            	"SHORTDATE"===短日期
            	"LONGDATE"==长日期
            	其它====自定义格式
            </param>
            <returns>日期字符串</returns>
        </member>
        <member name="M:Open.Utils.Time.GetNumberWeekDay(System.DateTime)">
            <summary>
            获取当前日期是星期几
            </summary>
            <param name="dt">时间对象</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.GetChineseWeekDay(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取中式星期信息
            </summary>
            <param name="y">年</param>
            <param name="m">月</param>
            <param name="d">日</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.GetChineseDateTime(System.DateTime)">
            <summary>
            获取中国时间
            </summary>
            <param name="dt">时间对象</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.GetTimeStartByType(Open.Utils.DataTimeType,System.DateTime)">
            <summary>
            获取开始时间
            </summary>
            <param name="type"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Time.GetTimeEndByType(Open.Utils.DataTimeType,System.DateTime)">
            <summary>
            获取结束时间
            </summary>
            <param name="DataTimeType">Week、Month、Season、Year</param>
            <param name="now"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.DateTimeExtension">
            <summary>
            时间戳-时间格式转换
            </summary>
        </member>
        <member name="M:Open.Utils.DateTimeExtension.ToTimestamp(System.DateTime)">
            <summary>
            获取时间戳 13位毫秒级
            </summary>
            <param name="dt">时间</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.DateTimeExtension.ToDateTime(System.Int64)">
            <summary>
            时间戳转换成时间,失败返回NULL则说明转换失败(如时间戳无效)13位毫秒级
            </summary>
            <param name="timestamp">时间戳</param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.Ueditor.UeditorConfig">
            <summary>
            百度编辑器UE配置文件操作文件操作
            </summary>
        </member>
        <member name="T:Open.Utils.Ueditor.UeditorUploadConfig">
            <summary>
            百度编辑器UE文件上传配置
            </summary>
        </member>
        <member name="P:Open.Utils.Ueditor.UeditorUploadConfig.PathFormat">
            <summary>
            文件命名规则
            </summary>
        </member>
        <member name="P:Open.Utils.Ueditor.UeditorUploadConfig.UploadFieldName">
            <summary>
            上传表单域名称
            </summary>
        </member>
        <member name="P:Open.Utils.Ueditor.UeditorUploadConfig.SizeLimit">
            <summary>
            上传大小限制
            </summary>
        </member>
        <member name="P:Open.Utils.Ueditor.UeditorUploadConfig.AllowExtensions">
            <summary>
            上传允许的文件格式
            </summary>
        </member>
        <member name="P:Open.Utils.Ueditor.UeditorUploadConfig.Base64">
            <summary>
            文件是否以 Base64 的形式上传
            </summary>
        </member>
        <member name="P:Open.Utils.Ueditor.UeditorUploadConfig.Base64Filename">
            <summary>
            Base64 字符串所表示的文件名
            </summary>
        </member>
        <member name="P:Open.Utils.AjaxResult.state">
            <summary>
            操作结果类型
            </summary>
        </member>
        <member name="P:Open.Utils.AjaxResult.message">
            <summary>
            获取 消息内容
            </summary>
        </member>
        <member name="P:Open.Utils.AjaxResult.data">
            <summary>
            获取 返回数据
            </summary>
        </member>
        <member name="T:Open.Utils.ResultType">
            <summary>
            表示 ajax 操作结果类型的枚举
            </summary>
        </member>
        <member name="F:Open.Utils.ResultType.info">
            <summary>
            消息结果类型
            </summary>
        </member>
        <member name="F:Open.Utils.ResultType.success">
            <summary>
            成功结果类型
            </summary>
        </member>
        <member name="F:Open.Utils.ResultType.warning">
            <summary>
            警告结果类型
            </summary>
        </member>
        <member name="F:Open.Utils.ResultType.error">
            <summary>
            异常结果类型
            </summary>
        </member>
        <member name="T:Open.Utils.BaseResult`1">
            <summary>
            API 返回JSON字符串
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Open.Utils.BaseResult`1.success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Open.Utils.BaseResult`1.statusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Open.Utils.BaseResult`1.message">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:Open.Utils.BaseResult`1.data">
            <summary>
            数据集
            </summary>
        </member>
        <member name="M:Open.Utils.Web.JsCssHelper.ReadJSFile(System.String[])">
            <summary>
            读取js文件内容并压缩
            </summary>
            <param name="filePathlist"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Web.JsCssHelper.ReadCssFile(System.String[])">
            <summary>
            读取css 文件内容并压缩
            </summary>
            <param name="filePathlist"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Web.JsCssHelper.Read(System.String)">
            <summary>
            读取对应文件
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Web.JsCssHelper.ReadJS(System.String)">
            <summary>
            读取js文件
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.Web.JsCssHelper.ReadCss(System.String)">
            <summary>
            读取css文件
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="P:Open.Utils.JsonMsgResult.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Open.Utils.JsonMsgResult.Code">
            <summary>
            消息编码
            </summary>
        </member>
        <member name="P:Open.Utils.JsonMsgResult.Message">
            <summary>
            消息正文
            </summary>
        </member>
        <member name="P:Open.Utils.JsonMsgResult.Method">
            <summary>
            响应方法
            </summary>
        </member>
        <member name="P:Open.Utils.JsonMsgResult.Responder">
            <summary>
            响应人
            </summary>
        </member>
        <member name="P:Open.Utils.JsonMsgResult.ReponseTime">
            <summary>
            响应时间
            </summary>
        </member>
        <member name="P:Open.Utils.JsonMsgResult.Data">
            <summary>
            响应数据
            </summary>
        </member>
        <member name="M:Open.Utils.Message.ReturnCodeMessage(System.String)">
            <summary>
            获取代码对应详细描述
            </summary>
            <param name="Code"></param>
            <returns></returns>
        </member>
        <member name="T:Open.Utils.OprationLogAddInput">
            <summary>
            添加
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.ApiLabel">
            <summary>
            接口名称
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.ApiPath">
            <summary>
            接口地址
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.ApiMethod">
            <summary>
            接口提交方法
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.Browser">
            <summary>
            浏览器
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.Os">
            <summary>
            操作系统
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.Device">
            <summary>
            设备
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.BrowserInfo">
            <summary>
            浏览器信息
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.ElapsedMilliseconds">
            <summary>
            耗时（毫秒）
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.Status">
            <summary>
            操作状态
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.Msg">
            <summary>
            操作消息
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.Params">
            <summary>
            操作参数
            </summary>
        </member>
        <member name="P:Open.Utils.OprationLogAddInput.Result">
            <summary>
            操作结果
            </summary>
        </member>
        <member name="T:Open.Utils.PageResult`1">
            <summary>
            分页结果
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Open.Utils.PageResult`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:Open.Utils.PageResult`1.#ctor(System.Int32,System.Int32)">
            <summary>
            ctor with params
            </summary>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页显示数量</param>
        </member>
        <member name="P:Open.Utils.PageResult`1.records">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Open.Utils.PageResult`1.rows">
            <summary>
            当前页的所有项
            </summary>
        </member>
        <member name="P:Open.Utils.PageResult`1.page">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Open.Utils.PageResult`1.pagesize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:Open.Utils.PageResult`1.total">
            <summary>
            页总数
            </summary>
        </member>
        <member name="T:Open.Utils.Pagination">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="P:Open.Utils.Pagination.rows">
            <summary>
            每页行数
            </summary>
        </member>
        <member name="P:Open.Utils.Pagination.page">
            <summary>
            当前页
            </summary>
        </member>
        <member name="P:Open.Utils.Pagination.sidx">
            <summary>
            排序列
            </summary>
        </member>
        <member name="P:Open.Utils.Pagination.sord">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="P:Open.Utils.Pagination.records">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Open.Utils.Pagination.total">
            <summary>
            总页数
            </summary>
        </member>
        <member name="T:Open.Utils.RequestParam">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="P:Open.Utils.RequestParam.Data">
            <summary>
            请求数据,默认采用Base64编码
            </summary>
        </member>
        <member name="P:Open.Utils.RequestParam.Signed">
            <summary>
            加密数据MD5(MerchantKey+data)
            </summary>
        </member>
        <member name="T:Open.Utils.RequestData">
            <summary>
            请求数据
            </summary>
        </member>
        <member name="P:Open.Utils.RequestData.AgencyCode">
            <summary>
            合作伙伴号（对外接口）/用户openid（C端接口）
            </summary>
        </member>
        <member name="P:Open.Utils.RequestData.Method">
            <summary>
            请求方法
            </summary>
        </member>
        <member name="P:Open.Utils.RequestData.Requestor">
            <summary>
            请求人
            </summary>
        </member>
        <member name="P:Open.Utils.RequestData.RequestTime">
            <summary>
            请求时间
            </summary>
        </member>
        <member name="P:Open.Utils.RequestData.Data">
            <summary>
            请求数据
            </summary>
        </member>
        <member name="T:Open.Utils.ReponseData">
            <summary>
            响应消息体
            </summary>
        </member>
        <member name="P:Open.Utils.ReponseData.Code">
            <summary>
            消息编码
            </summary>
        </member>
        <member name="P:Open.Utils.ReponseData.Message">
            <summary>
            消息正文
            </summary>
        </member>
        <member name="P:Open.Utils.ReponseData.Method">
            <summary>
            响应方法
            </summary>
        </member>
        <member name="P:Open.Utils.ReponseData.Responder">
            <summary>
            响应人
            </summary>
        </member>
        <member name="P:Open.Utils.ReponseData.ReponseTime">
            <summary>
            响应时间
            </summary>
        </member>
        <member name="P:Open.Utils.ReponseData.Data">
            <summary>
            响应数据
            </summary>
        </member>
        <member name="T:Open.Utils.ReturnResult">
            <summary>
            返回结果
            </summary>
        </member>
        <member name="P:Open.Utils.ReturnResult.success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Open.Utils.ReturnResult.statusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Open.Utils.ReturnResult.message">
            <summary>
            信息
            </summary>
        </member>
        <member name="T:Open.Utils.ReturnResultEntity`1">
            <summary>
            返回结果
            </summary>
            <typeparam name="T">实体</typeparam>
        </member>
        <member name="P:Open.Utils.ReturnResultEntity`1.success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Open.Utils.ReturnResultEntity`1.statusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Open.Utils.ReturnResultEntity`1.message">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:Open.Utils.ReturnResultEntity`1.data">
            <summary>
            数据实体
            </summary>
        </member>
        <member name="T:Open.Utils.ReturnResultList`1">
            <summary>
            返回结果
            </summary>
            <typeparam name="T">实体</typeparam>
        </member>
        <member name="P:Open.Utils.ReturnResultList`1.success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:Open.Utils.ReturnResultList`1.statusCode">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Open.Utils.ReturnResultList`1.message">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:Open.Utils.ReturnResultList`1.List">
            <summary>
            数据集合
            </summary>
        </member>
        <member name="M:Open.Utils.TreeGrid.ToTree(System.Collections.Generic.List{Open.Utils.TreeGridModel},System.String)">
            <summary>
            树形数据转化
            </summary>
            <param name="list">数据</param>
            <returns></returns>
        </member>
        <member name="P:Open.Utils.TreeGridModel.complete">
            <summary>
            子节点是否已经加载完成了
            </summary>
        </member>
        <member name="P:Open.Utils.TreeGridModel.hasChildren">
            <summary>
            是否有子节点
            </summary>
        </member>
        <member name="P:Open.Utils.TreeGridModel.ChildNodes">
            <summary>
            子节点列表数据
            </summary>
        </member>
        <member name="M:Open.Utils.TreeView.ToTree(System.Collections.Generic.List{Open.Utils.TreeViewModel},System.String)">
            <summary>
            树形数据转化
            </summary>
            <param name="list">数据</param>
            <returns></returns>
        </member>
        <member name="M:Open.Utils.TreeView.SetNodeParentCheckState(System.Collections.Generic.List{Open.Utils.TreeViewModel})">
            <summary>
            设置已选中节点的上级的选中状态
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.parentId">
            <summary>
            父级节点ID
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.id">
            <summary>
            节点id
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.text">
            <summary>
            节点显示数据
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.title">
            <summary>
            节点提示
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.value">
            <summary>
            节点数值
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.img">
            <summary>
            显示图标
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.showcheck">
            <summary>
            是否显示勾选框
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.checkstate">
            <summary>
            是否被勾选0 for unchecked, 1 for checked, 2 for partial checked 
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.isexpand">
            <summary>
            是否展开
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.complete">
            <summary>
            子节点是否已经加载完成了
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.hasChildren">
            <summary>
            是否有子节点
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.iconState">
            <summary>
            文字图标
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.path">
            <summary>
            节点路径
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.extend">
            <summary>
            扩展数据1
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.extend2">
            <summary>
            扩展数据2
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.sortCode">
            <summary>
            排序码
            </summary>
        </member>
        <member name="P:Open.Utils.TreeViewModel.ChildNodes">
            <summary>
            子节点列表数据
            </summary>
        </member>
        <member name="T:Utils.Events.Event">
            <summary>
            事件
            </summary>
        </member>
        <member name="M:Utils.Events.Event.#ctor">
            <summary>
            初始化事件
            </summary>
        </member>
        <member name="P:Utils.Events.Event.Id">
            <summary>
            事件标识
            </summary>
        </member>
        <member name="P:Utils.Events.Event.Time">
            <summary>
            事件时间
            </summary>
        </member>
        <member name="M:Utils.Events.Event.ToString">
            <summary>
            输出日志
            </summary>
        </member>
        <member name="T:Utils.Events.Handlers.IEventHandler">
            <summary>
            事件处理器
            </summary>
        </member>
        <member name="T:Utils.Events.Handlers.IEventHandler`1">
            <summary>
            事件处理器
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
        </member>
        <member name="M:Utils.Events.Handlers.IEventHandler`1.HandleAsync(`0)">
            <summary>
            处理事件
            </summary>
            <param name="event">事件</param>
        </member>
        <member name="T:Utils.Events.Handlers.IEventHandlerManager">
            <summary>
            事件处理器服务
            </summary>
        </member>
        <member name="M:Utils.Events.Handlers.IEventHandlerManager.GetHandlers``1">
            <summary>
            获取事件处理器列表
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
        </member>
        <member name="T:Utils.Events.IEvent">
            <summary>
            事件
            </summary>
        </member>
        <member name="P:Utils.Events.IEvent.Id">
            <summary>
            事件标识
            </summary>
        </member>
        <member name="P:Utils.Events.IEvent.Time">
            <summary>
            事件时间
            </summary>
        </member>
        <member name="T:Utils.Events.IEventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="M:Utils.Events.IEventBus.PublishAsync``1(``0)">
            <summary>
            发布事件
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
            <param name="event">事件</param>
        </member>
        <member name="T:Utils.Events.Messages.IMessageEvent">
            <summary>
            消息事件
            </summary>
        </member>
        <member name="P:Utils.Events.Messages.IMessageEvent.Data">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="P:Utils.Events.Messages.IMessageEvent.Target">
            <summary>
            发送目标
            </summary>
        </member>
        <member name="P:Utils.Events.Messages.IMessageEvent.Callback">
            <summary>
            回调
            </summary>
        </member>
        <member name="T:Utils.Events.Messages.IMessageEventBus">
            <summary>
            消息事件总线
            </summary>
        </member>
        <member name="M:Utils.Events.Messages.IMessageEventBus.PublishAsync``1(``0)">
            <summary>
            发布消息事件
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
            <param name="event">消息事件</param>
        </member>
        <member name="T:Utils.Events.Messages.MessageEvent">
            <summary>
            消息事件
            </summary>
        </member>
        <member name="P:Utils.Events.Messages.MessageEvent.Data">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="P:Utils.Events.Messages.MessageEvent.Target">
            <summary>
            发送目标
            </summary>
        </member>
        <member name="P:Utils.Events.Messages.MessageEvent.Callback">
            <summary>
            回调
            </summary>
        </member>
        <member name="M:Utils.Events.Messages.MessageEvent.ToString">
            <summary>
            输出日志
            </summary>
        </member>
    </members>
</doc>
